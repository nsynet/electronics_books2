Sunplus u'nSP Assembler - Ver. 1.8.0
              Listing File Has Been Relocated
                            	//*****************************************************************************/
                            	// 描述： 实现正弦波、三角波、锯齿波三种波形输出，
                            	//		  用3个按键实现不同波形的输出。
                            	//日期: 2003/07/08
                            	//版本：1.8.0
                            	//*****************************************************************************/
                            	.INCLUDE hardware.inc;
                     <      	//========================================================================================
                     <      	// Progarm: The file be included by modules
                     <      	// Arranged by: Andy Hsu
                     <      	// Date: 	2000/06/23: first version
                     <      	//		2000/07/24: modified
                     <      	//		2000/10/20: modified for version 52A
                     <      	//========================================================================================
                     <      	//////////////////////////////////////////////////////////////////
                     <      	// Definitions for I/O Port
                     <      	//////////////////////////////////////////////////////////////////
                     <      	.DEFINE	P_IOA_Data   		0x7000;        // Write Data into data register and read from IOA pad
                     <      	.DEFINE P_IOA_Buffer        0x7001;        // Write Data into buffer register and read from buffer register
                     <      	.DEFINE P_IOA_Dir           0x7002;        // Direction vector for IOA
                     <      	.DEFINE P_IOA_Attrib        0x7003;        // Attribute vector for IOA
                     <      	.DEFINE P_IOA_Latch         0x7004;        // Latch PortA data for key change wake-up
                     <      	
                     <      	.DEFINE P_IOB_Data         	0x7005;        // Write Data into the data register and read from IOB pad
                     <      	.DEFINE P_IOB_Buffer        0x7006;        // Write Data into buffer register and read from buffer register
                     <      	.DEFINE P_IOB_Dir           0x7007;        // Direction vector for IOB
                     <      	.DEFINE P_IOB_Attrib        0x7008;        // Attribute vector for IOB
                     <      	
                     <      	.DEFINE P_FeedBack          0x7009;        // Clock form external R,C
                     <      	.DEFINE P_TimerA_Data       0x700A;        // Data port for TimerA 
                     <      	.DEFINE P_TimerA_Ctrl       0x700B;        // Control Port for TimerA
                     <      	.DEFINE P_TimerB_Data       0x700C;        // Data port for TimerB
                     <      	.DEFINE P_TimerB_Ctrl       0x700D;        // Control Port for TimerB
                     <      	.DEFINE P_TimeBase_Setup    0x700E;        // TimerBase Freq. Set
                     <      	.DEFINE P_TimeBase_Clear	0x700F;		   // Reset Timerbase counter
                     <      	.DEFINE P_INT_Ctrl          0x7010;        // Control port for interrupt source
                     <      	.DEFINE P_INT_Clear         0x7011;        // Clear interrupt source
                     <      	.DEFINE P_Watchdog_Clear    0x7012;        // Watchdog Reset
                     <      	.DEFINE P_SystemClock       0x7013;        // Change system clock frequency(include go to standby mode)
                     <      	
                     <      	//... PA6442 Old version (for EC-02) ...........
                     <      	//.DEFINE P_ADDA               0x7014;        //10-bit DA(W) AD(R)
                     <      	//.DEFINE P_DAC1               0x7014;        //
                     <      	//.DEFINE P_AD_Ctrl            0x7015;        //AD/DA control
                     <      	//.DEFINE P_AD_Status          0x7015;        //AD status
                     <      	//.DEFINE P_DAC2               0x7016;        //DAC channel 2
                     <      	//.DEFINE P_PWM                0x7016;        //PWM output
                     <      	//.DEFINE P_DA_Ctrl            0x7017;        //DAC latch control
                     <      	
                     <      	//... PA6442 New version MC52A (For EC-03)....
                     <      	.DEFINE P_ADC 	        	0x7014;        	// Data Port for AD
                     <      	.DEFINE P_ADC_Ctrl          0x7015;        	// Control Port for AD control
                     <      	.DEFINE P_ADC_Status        0x7015;        	// AD Port Status
                     <      	.DEFINE P_DAC2              0x7016;        	// Data Port for DAC2
                     <      	.DEFINE P_PWM               0x7016;        	// Data Port for PWM
                     <      	.DEFINE P_DAC1	        	0x7017;        	// Data Port for DAC1
                     <      	.DEFINE P_DAC_Ctrl			0x702A;			// Control Port for two DAC and audio output mode
                     <      	//............................................
                     <      	
                     <      	.DEFINE P_IR_Ctrl			0x7018;			// Control Port for IR
                     <      	.DEFINE P_LVD_Ctrl          0x7019;        	// Control Port for LVD
                     <      	
                     <      	.DEFINE P_SIO_Addr_Low		0x701B;			// Address Port low
                     <      	.DEFINE P_SIO_Addr_Mid		0x701C;			// Address Port middle
                     <      	.DEFINE P_SIO_Addr_High	 	0x701D;			// Address Port high
                     <      	.DEFINE P_SIO_Ctrl			0x701E;			// Control Port
                     <      	.DEFINE P_SIO_Start			0x701F;			// Start port for serial interface
                     <      	.DEFINE P_SIO_Stop			0x7020;			// Stop port for serial interface
                     <      	
                     <      	.DEFINE P_UART_Command1		 0x7021;		// Command1 Port for UART
                     <      	.DEFINE P_UART_Command2		 0x7022;		// Command2 Port for UART
                     <      	.DEFINE P_UART_Data			 0x7023; 		// Data Port for UART
                     <      	.DEFINE	P_UART_BaudScalarLow 0x7024;		// Set Baud Rate scalar low
                     <      	.DEFINE	P_UART_BaudScalarHigh 0x7025;		// Set Baud Rate scalar high
                     <      	
                     <      	
                     <      	//... Definitions for P_INT_Ctrl ..............
                     <      	.DEFINE C_IRQ6_TMB2             0x0001;        	// Timer B IRQ6
                     <      	.DEFINE C_IRQ6_TMB1             0x0002;        	// Timer A IRQ6
                     <      	.DEFINE C_IRQ5_2Hz              0x0004;        	// 2Hz IRQ5
                     <      	.DEFINE C_IRQ5_4Hz              0x0008;        	// 4Hz IRQ5
                     <      	.DEFINE C_IRQ4_1KHz             0x0010;        	// 1024Hz IRQ4
                     <      	.DEFINE C_IRQ4_2KHz             0x0020;        	// 2048Hz IRQ4
                     <      	.DEFINE C_IRQ4_4KHz             0x0040;        	// 4096Hz IRQ4
                     <      	.DEFINE C_IRQ3_KEY              0x0080;        	// Key Change IRQ3
                     <      	.DEFINE C_IRQ3_EXT1             0x0100;        	// Ext1 IRQ3
                     <      	.DEFINE C_IRQ3_EXT2             0x0200;        	// Ext2 IRQ3
                     <      	.DEFINE C_IRQ2_TMB              0x0400;        	// Timer B IRQ2
                     <      	.DEFINE C_FIQ_TMB               0x0800;        	// Timer B FIQ
                     <      	.DEFINE C_IRQ1_TMA              0x1000;        	// Timer A IRQ1
                     <      	.DEFINE C_FIQ_TMA               0x2000;        	// Timer A FIQ
                     <      	.DEFINE C_IRQ0_PWM              0x4000;        	// PWM IRQ0
                     <      	.DEFINE C_FIQ_PWM               0x8000;        	// PWM FIQ
                     <      	
                     <      	// Definitions for P_TimerA/B_Ctrl ............                               
                     <      	.DEFINE	C_Fosc_2				0x0000;			// 
                     <      	.DEFINE	C_Fosc_256		    	0x0001;			//
                     <      	.DEFINE	C_32768Hz				0x0002;			//
                     <      	.DEFINE	C_8192Hz				0x0003;			//
                     <      	.DEFINE	C_4096Hz				0x0004;			//
                     <      	.DEFINE	C_A1					0x0005;			//
                     <      	.DEFINE C_A0					0x0006;			//
                     <      	.DEFINE C_Ext1					0x0007;			//
                     <      	
                     <      	.DEFINE	C_2048Hz				0x0000;			//
                     <      	.DEFINE	C_1024Hz				0x0008;			//
                     <      	.DEFINE	C_256Hz					0x0010;			//
                     <      	.DEFINE	C_TMB1Hz				0x0018;			//
                     <      	.DEFINE	C_4Hz					0x0020;			//
                     <      	.DEFINE	C_2Hz					0x0028;			//
                     <      	.DEFINE	C_B1					0x0030;			//
                     <      	.DEFINE	C_Ext2					0x0038;			//
                     <      	
                     <      	.DEFINE	C_Off					0x0000;			//
                     <      	.DEFINE C_D1					0x0040;			//
                     <      	.DEFINE C_D2					0x0080;			//
                     <      	.DEFINE C_D3					0x00C0;			//
                     <      	.DEFINE C_D4					0x0100;			//
                     <      	.DEFINE C_D5					0x0140;			//
                     <      	.DEFINE C_D6					0x0180;			//
                     <      	.DEFINE C_D7					0x01C0;			//
                     <      	.DEFINE C_D8					0x0200;			//
                     <      	.DEFINE C_D9					0x0240;			//
                     <      	.DEFINE C_D10					0x0280;			//
                     <      	.DEFINE C_D11					0x02C0;			//
                     <      	.DEFINE C_D12					0x0300;			//
                     <      	.DEFINE C_D13					0x0340;			//
                     <      	.DEFINE C_D14					0x0380;			//
                     <      	.DEFINE C_TA_Div_2				0x03C0;			// Timer A
                     <      	.DEFINE C_TB_Div_2				0x03C0;			// Timer B
                     <      	
                     <      	//... Definition for P_SystemClock ............
                     <      	.DEFINE C_Fosc					0x0000;			// b3..b0
                     <      	.DEFINE C_Fosc_Div_2			0x0001;			//
                     <      	.DEFINE C_Fosc_Div_4			0x0002;			//
                     <      	.DEFINE C_Fosc_Div_8			0x0003;			// (default)
                     <      	.DEFINE C_Fosc_Div_16			0x0004;			//
                     <      	.DEFINE C_Fosc_Div_32			0x0005;			//
                     <      	.DEFINE C_Fosc_Div_64			0x0006;			//
                     <      	.DEFINE C_Sleep					0x0007;		 	//
                     <      	
                     <      	.DEFINE	C_32K_Work				0x0000;			// b4
                     <      	.DEFINE C_32K_Off				0x0000;			// 
                     <      	.DEFINE C_StrongMode			0x0000;			// b5
                     <      	.DEFINE C_AutoMode				0x0000;			//
                     <      	
                     <      	//... Define for P_AD_Ctrl ....................
                     <      	.DEFINE	C_AD					0x0001;			//
                     <      	.DEFINE C_DA					0x0000;			//
                     <      	.DEFINE C_MIC					0x0000;			//
                     <      	.DEFINE C_LINE					0x0002;			//
                     <      	
                     <      	//... Define for P_DA_Ctrl ....................
                     <      	.DEFINE C_PushPull				0x0000;			// b0, (default) 
                     <      	.DEFINE C_DoubleEnd				0x0001;			// b0
                     <      	.DEFINE	C_DAC_Mode				0x0000;			// b1, (default)
                     <      	.DEFINE C_PWM_Mode				0x0002;			// b1
                     <      	
                     <      	.DEFINE	C_D1_Direct				0x0000;			// DAC1 latch
                     <      	.DEFINE C_D1_LatchA				0x0008;			// 
                     <      	.DEFINE C_D1_LatchB				0x0010;			//
                     <      	.DEFINE C_D1_LatchAB			0x0018;			//
                     <      	
                     <      	.DEFINE	C_D2_Direct				0x0000;			// DAC2 latch
                     <      	.DEFINE C_D2_LatchA				0x0020;			// 
                     <      	.DEFINE C_D2_LatchB				0x0040;			//
                     <      	.DEFINE C_D2_LatchAB			0x00C0;			//
                     <      	
                     <      	//... Define for P_LVD_Ctrl ...................
                     <      	.DEFINE C_LVD24V				0x0000;			// LVD = 2.4V 
                     <      	.DEFINE C_LVD28V				0x0001;			// LVD = 2.8V
                     <      	.DEFINE C_LVD32V				0x0002;			// LVD = 3.2V
                     <      	.DEFINE C_LVD36V				0x0003;			// LVD = 3.6V
                     <      	
                     <      	
                     <      	.EXTERNAL	F_SP_Read_INT_Status;			// for further use
                     <      	.EXTERNAL 	F_SP_Write_INT_Status;			// for further use
                     <      	.EXTERNAL  	F_SP_Set_INT_Vector;			// for further use
                     <      	.EXTERNAL	F_SP_Clear_INT_Vector;			// for further use
                     <      	
                     <      	.EXTERNAL	F_SP_Send_Out;					//
                     <      	.EXTERNAL	F_SP_Send_DAC1;					//
                     <      	.EXTERNAL	F_SP_Send_DAC2;					//
                     <      	.EXTERNAL	F_SP_Send_Two_DAC;				//
                     <      	.EXTERNAL	F_SP_Init_HW;					//
                     <      	
                     <      	.EXTERNAL	R_InterruptStatus;
                     <      	
                     <      	
                     <      	.EXTERNAL 	F_SP_RampUpDAC1;
                     <      	.EXTERNAL 	F_SP_RampDnDAC1;
                     <      	.EXTERNAL 	F_SP_RampUpDAC2;
                     <      	.EXTERNAL  	F_SP_RampDnDAC2;
                     <      	
                     <      	.EXTERNAL 	F_SP_InitQueue;
                     <      	.EXTERNAL 	F_SP_ReadQueue;
                     <      	.EXTERNAL 	F_SP_WriteQueue;
                     <      	.EXTERNAL 	F_SP_TestQueue;
                     <      	
                     <      	
                     <      	
                     <      	.EXTERNAL	F_SP_Get_ADC
                     <      	
                     <      	.EXTERNAL 	F_SP_Set_P_TimerA_Ctrl
                     <      	.EXTERNAL 	F_SP_Set_P_TimerA_Data
                     <      	.EXTERNAL 	F_SP_Set_P_TimerB_Ctrl
                     <      	.EXTERNAL 	F_SP_Set_P_TimerB_Data
                     <      	.EXTERNAL 	F_SP_Set_P_INT_Ctrl
                     <      	.EXTERNAL 	F_SP_Set_P_INT_Clear
                     <      	.EXTERNAL 	F_SP_Set_P_SystemClock
                     <      	.EXTERNAL 	F_SP_Set_P_DAC_Ctrl
                     <      	.EXTERNAL 	F_SP_Set_P_ADC_Ctrl
                     <      	
                     <      		
                     <      	
                     <      	//--------------------------------------------
                     <      	SACM_MACRO1: 	.MACRO
                     <      		
                     <      		.ENDM
                     <      	
                     <      	SACM_MACRO2:	.MACRO
                     <      		
                     <      		.ENDM
                     <      	
                     <      	
                     <      	
                     <      	
                     <      	//.define PC_Play_Enable_A2000		1    	// Enable the PC-Play function for SACM-A2000 module
                     <      	//.define PC_Play_Enable_S480		1    	// Enable the PC-Play function for SACM-S480 module
                     <      	//.define PC_Play_Enable_S240		1    	// Enable the PC-Play function for SACM-S240 module    
                     <      	//.define PC_Play_Enable_MS01		1    	// Enable the PC-Play function for SACM-MS01 module
                     <      	
                     <      	
                     <      	
                     <      	//========================================================================================        
                     <      	// End of hardware.inc
                     <      	//========================================================================================
                            	.INCLUDE key.inc;					    //包含键盘的API
                     <      	//========================================================================================
                     <      	// Progarm: The head file for pcplay.asm
                     <      	// Wrote by: Andy Hsu
                     <      	// Last modified date: 
                     <      	// 		2000/06/23: first version
                     <      	//		2000/07/20: modified
                     <      	//========================================================================================
                     <      	
                     <      	.EXTERNAL  F_Key_Scan_Initial;
                     <      	.EXTERNAL  F_Key_Scan_ServiceLoop;			// 1 scan line +Vcc
                     <      	.EXTERNAL  F_Key_Scan_ServiceLoop_2;		// 2 scan line +Vcc / IOA
                     <      	.EXTERNAL  F_Key_DebounceCnt_Down;
                     <      	.EXTERNAL 	F_SP_GetCh;
                            	.DEFINE		P_WatchDog_Clear	0x7012; 
00000004                    	.RAM
00000004 00 00              	.VAR I_Key;						        //键值存储单元
0000003B                    	.iram
0000003B 00 00 01 00        	.var R_SUM,T_PinLv=1;
                            	//=========================================================================/
                            	//正弦数据表
                            	//=========================================================================/
000082A8                    	.data 
                            	TBsin: 
000082A8 00 80 02 82        	.dw 0x8000,0x8202,0x8403,0x8604,0x8803,0x8a00,0x8bfb,0x8df2,0x8fe6,0x91d7; 
         03 84 04 86
         03 88 00 8A
         FB 8B F2 8D
         E6 8F D7 91
000082B2 C1 93 B8 95        	.dw 0x93c1,0x95b8,0x9789,0x9964,0x9b39,0x9d06,0x9ecd,0xa08b,0xa242,0xa3f0;
         89 97 64 99
         39 9B 06 9D
         CD 9E 8B A0
         42 A2 F0 A3
000082BC 94 AB 30 A7        	.dw 0xab94,0xa730,0xa8c1,0xaa48,0xabc4,0xad35,0xae9b,0xaff5,0xb143,0xb285;
         C1 A8 48 AA
         C4 AB 35 AD
         9B AE F5 AF
         43 B1 85 B2
000082C6 B9 B3 E1 B4        	.dw 0xb3b9,0xb4e1,0xb5fb,0xb708,0xb807,0xb8f7,0xb9da,0xbaad,0xbb72,0xbc28;
         FB B5 08 B7
         07 B8 F7 B8
         DA B9 AD BA
         72 BB 28 BC
000082D0 CE BC 6B BD        	.dw 0xbcce,0xbd6b,0xbded,0xbe65,0xbece,0xbf26,0xbf6e,0xbfa7,0xbfcf,0xbfe7;
         ED BD 65 BE
         CE BE 26 BF
         6E BF A7 BF
         CF BF E7 BF
000082DA F0 BF E7 BF        	.dw 0xbff0,0xbfe7,0xbfcf,0xbfa7,0xbf6e,0xbf26,0xbece,0xbe65,0xbded,0xbd66;
         CF BF A7 BF
         6E BF 26 BF
         CE BE 65 BE
         ED BD 66 BD
000082E4 CE BC 28 BC        	.dw 0xbcce,0xbc28,0xbb72,0xbaad,0xb9da,0xb8f8,0xb807,0xb708,0xb5fb,0xb4ee;
         72 BB AD BA
         DA B9 F8 B8
         07 B8 08 B7
         FB B5 EE B4
000082EE BA B3 85 B2        	.dw 0xb3ba,0xb285,0xb143,0xaff5,0xae96,0xad35,0xabc4,0xaa48,0xa8c1,0xa730;
         43 B1 F5 AF
         96 AE 35 AD
         C4 AB 48 AA
         C1 A8 30 A7
000082F8 94 A5 F0 A3        	.dw 0xa594,0xa3f0,0xa242,0xa08c,0x9ecd,0x9d06,0x9b39,0x9964,0x9789,0x95a8;
         42 A2 8C A0
         CD 9E 06 9D
         39 9B 64 99
         89 97 A8 95
00008302 C2 93 D6 91        	.dw 0x93c2,0x91d6,0x8fe6,0x8df2,0x8bfb,0x8a00,0x8803,0x8604,0x8403,0x8000;
         E6 8F F2 8D
         FB 8B 00 8A
         03 88 04 86
         03 84 00 80
0000830C 00 80 FE 7D        	.dw 0x8000,0x7dfe,0x7bfd,0x79fc,0x77fd,0x7600,0x7405,0x720e,0x701a,0x6e2a;
         FD 7B FC 79
         FD 77 00 76
         05 74 0E 72
         1A 70 2A 6E
00008316 3F 6C 58 6A        	.dw 0x6c3f,0x6a58,0x6877,0x669c,0x64c7,0x62fa,0x6133,0x5f75,0x5dbe,0x5c10;
         77 68 9C 66
         C7 64 FA 62
         33 61 75 5F
         BE 5D 10 5C
00008320 BC 5A D0 58        	.dw 0x5abc,0x58d0,0x573f,0x55b8,0x543c,0x52cb,0x5165,0x500b,0x4ebd,0x4d7b;
         3F 57 B8 55
         3C 54 CB 52
         65 51 0B 50
         BD 4E 7B 4D
0000832A 47 4C 1F 4B        	.dw 0x4c47,0x4b1f,0x4a05,0x48f8,0x47f9,0x4709,0x4626,0x4553,0x448e,0x43d8;
         05 4A F8 48
         F9 47 09 47
         26 46 53 45
         8E 44 D8 43
00008334 32 43 9A 42        	.dw 0x4332,0x429a,0x4213,0x419b,0x4132,0x40da,0x4092,0x4059,0x4031,0x4019;
         13 42 9B 41
         32 41 DA 40
         92 40 59 40
         31 40 19 40
0000833E 10 40 19 40        	.dw 0x4010,0x4019,0x4031,0x4059,0x4092,0x40da,0x4132,0x419b,0x4213,0x429a;
         31 40 59 40
         92 40 DA 40
         32 41 9B 41
         13 42 9A 42
00008348 32 43 D8 43        	.dw 0x4332,0x43d8,0x448e,0x4553,0x4626,0x4708,0x47f9,0x48f8,0x4a05,0x4b1f;
         8E 44 53 45
         26 46 08 47
         F9 47 F8 48
         05 4A 1F 4B
00008352 46 4C 7B 4D        	.dw 0x4c46,0x4d7b,0x4ebd,0x500b,0x5165,0x52cb,0x543c,0x55b8,0x5738,0x58d0;
         BD 4E 0B 50
         65 51 CB 52
         3C 54 B8 55
         38 57 D0 58
0000835C BC 5A 10 5C        	.dw 0x5abc,0x5c10,0x5dbe,0x5f74,0x6133,0x62fa,0x64c7,0x669c,0x6877,0x6a58;
         BE 5D 74 5F
         33 61 FA 62
         C7 64 9C 66
         77 68 58 6A
00008366 3F 6C 2A 6E        	.dw 0x6c3f,0x6e2a,0x701a,0x720e,0x7405,0x7600,0x77fd,0x79fc,0x7bfd,0x7dfe;
         1A 70 0E 72
         05 74 00 76
         FD 77 FC 79
         FD 7B FE 7D
00008153                    	.CODE
                            	//============================================================================= 
                            	// 函数： main()
                            	// 描述：主函数
                            	//=============================================================================
                            	.PUBLIC _main;						
                            	_main: 	
00008153 40 94              			R2=0x0000;
00008154 1A D5 2A 70        	    	[P_DAC_Ctrl]=R2; 
00008156 40 F0 76 81        			CALL L_User_Init_IO;		    //初始化IO口
00008158 40 F0 F2 81        			CALL F_Key_Scan_Initial;	    //键盘初始化
                            	L_MainLoop:
0000815A 40 F0 FD 81        			CALL F_Key_Scan_ServiceLoop;    //扫描键盘
0000815C 40 F0 63 82        	        CALL F_Key_DebounceCnt_Down;    //按键去抖
0000815E 41 98              	        R4=0x0001;                      //清看门狗
0000815F 1C D9 12 70        		   	[P_Watchdog_Clear]=R4;	
00008161 40 F0 6A 82        	   		CALL F_SP_GetCh;			    //取键值
00008163 40 42              		    CMP R1, 0x0000;					
00008164 4B 5E              		    JE 	L_MainLoop;	
00008165 40 94              		    R2=0x0000				
00008166 19 D3 04 00        		 	[I_Key] = R1;			        //保存键值
00008168 41 42              			cmp R1, 0x0001;	                
00008169 14 5E              			je L_Wave1;                     //键1按下，输出锯齿波
0000816A 11 93 04 00        			R1=[I_Key]; 
0000816C 42 42              			cmp R1, 0x0002;
0000816D 26 5E              			je L_Wave2;                    //键2按下，输出三角波
0000816E 11 93 04 00        			R1=[I_Key];
00008170 44 42              			cmp R1, 0x0004;
00008171 3F 5E              			je L_sina;                     //键3按下，输出正弦波
00008172 41 98              			R4=0x0001;                      //清看门狗
00008173 1C D9 12 70        		   	[P_Watchdog_Clear]=R4;	
00008175 5C EE              		   	JMP	L_MainLoop;
                            	L_User_Init_IO:
00008176 40 92              			R1 = 0x0000;			        //设A口为带下拉电阻的输入
00008177 19 D3 02 70        	        [P_IOA_Dir] = R1;			
00008179 19 D3 03 70        	        [P_IOA_Attrib] = R1;
0000817B 19 D3 00 70        	        [P_IOA_Data] = R1;
0000817D 90 9A              			RETF;
                            	//==========================================================================
                            	//锯齿波
                            	//==========================================================================		
                            	L_Wave1:   
0000817E 0B 97 40 00        		R3=0x0040		      //D/A转换为10位，即B15~B6 
00008180 1A D5 17 70        	    [P_DAC1]=R2;  
00008182 1A D5 16 70        	    [P_DAC2]=R2;
00008184 40 F0 8C 81        	    CALL L_Delay		  //调用延时
00008186 03 05              	    R2+=R3
00008187 11 93 00 70        	    R1 = [P_IOA_Data]
00008189 41 42              	    cmp R1, 0x0001       
0000818A 4D 8E              	    jbe L_Wave1        
0000818B 72 EE              	    jmp L_MainLoop;       //有其它键按下，则返回键盘扫描子程序
                            	L_Delay:				  //延时
0000818C 40 92              	    R1=0  
                            	L_DelayLoop:
0000818D 41 98              	 	R4 = 0x0001;                      
0000818E 1C D9 12 70        		[P_WatchDog_Clear] = R4;	   		
00008190 09 03 00 08        	    R1+=2048
00008192 46 4E              	    JNZ L_DelayLoop    
00008193 90 9A              	    RETF
                            	//==========================================================================  
                            	//三角波
                            	//==========================================================================  
                            	L_Wave2:
00008194 0B 97 40 00        		 R3=0x0040		      //D/A转换为10位，即B15~B6 
00008196 1A D5 17 70        	    [P_DAC1]=R2;  
00008198 1A D5 16 70        	    [P_DAC2]=R2;
0000819A 40 F0 8C 81        	    CALL L_Delay		  //调用延时
0000819C 03 05              	    R2+=R3;
0000819D 0A 45 C0 FF        	    cmp R2, 0xffc0;       //判断是否达到峰值
0000819F 07 5E              	    je L_Sub;
000081A0 11 93 00 70        	     R1 = [P_IOA_Data]
000081A2 42 A2              	    R1|= 0x0002
000081A3 42 42              	    cmp R1, 0x0002
000081A4 51 5E              	    je L_Wave2        
000081A5 80 FE 5A 81        	    GOTO L_MainLoop       //有其它键按下，则返回键盘扫描子程序
                            	L_Sub:
000081A7 1A D5 17 70        	    [P_DAC1]=R2;  
000081A9 1A D5 16 70        	    [P_DAC2]=R2;
000081AB 40 F0 8C 81        	    CALL L_Delay
000081AD 03 25              	    R2-=R3;
000081AE 40 44              	    cmp R2, 0x0000;		  //判断是否为零
000081AF 49 4E              	    jne  L_Sub;
000081B0 5D EE              	    jmp L_Wave2;
                            	//==========================================================================  
                            	//正弦波
                            	//==========================================================================     
                            	L_sina:  
000081B1 0A 95 00 80        	 	r2=0x8000
000081B3 1A D5 17 70        	    [P_DAC1]=r2  
000081B5 1A D5 16 70        	    [P_DAC2]=r2 
000081B7 0D 9B A8 82        	     bp=TBsin;
000081B9 1A D5 17 70        	     [P_DAC1]=r2 
000081BB 1A D5 16 70        	     [P_DAC2]=r2 
000081BD 40 96              	     r3=0
000081BE 1B D7 3B 00        	     [R_SUM]=r3
000081C0 0A 95 00 80        	     r2=0x8000
000081C2 1A D5 17 70        	    [P_DAC1]=r2 
000081C4 1A D5 16 70        	    [P_DAC2]=r2   
                            	 L_wait: 
000081C6 0A 95 00 80        	 r2=0x8000
000081C8 1A D5 17 70        	    [P_DAC1]=r2
000081CA 1A D5 16 70        	    [P_DAC2]=r2     
000081CC 15 07 3B 00        	     r3=bp+[R_SUM]            //取相应地址
000081CE C3 94              	     r2=[r3];                 //地址中数据送r2
000081CF 13 97 3B 00        	     r3=[R_SUM]
000081D1 13 07 3C 00        	     r3=r3+[T_PinLv]
000081D3 41 06              	     r3=r3+1                  //地址指针加1
000081D4 1B D7 3B 00        	    [R_SUM]=r3
000081D6 1A D5 17 70        	     [P_DAC1]=r2
000081D8 1A D5 16 70        	     [P_DAC2]=r2
000081DA 41 98              	     R4 = 0x0001;                      
000081DB 1C D9 12 70        		[P_WatchDog_Clear] = R4;  //清看门狗
000081DD 0E BD DF FF        	     sr&=0xffdf
000081DF 0C 99 C8 00        	     r4=200
000081E1 03 49              	     cmp r4,r3
000081E2 5D 1E              	     jnb L_wait              
000081E3 11 93 00 70        	     R1 = [P_IOA_Data]
000081E5 44 A2              	    R1|= 0x0004
000081E6 44 42              	    cmp R1, 0x0004
000081E7 02 5E              	    je L_next
000081E8 80 FE 5A 81        	    goto L_MainLoop         //有其它键按下，则返回键盘扫描子程序
                            	L_next:
000081EA 0A 95 00 80        	    r2=0x8000
000081EC 1A D5 17 70        	    [P_DAC1]=r2
000081EE 1A D5 16 70        	    [P_DAC2]=r2   
000081F0 80 FE B1 81        	    goto L_sina
                            	 
                            	//*****************************************************************************/
                            	//  main.asm 结束
                            	//*****************************************************************************/
0 error(s), 0 warning(s).

