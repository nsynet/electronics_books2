Sunplus u'nSP Assembler - Ver. 1.8.0
              Listing File Has Been Relocated
                            	//======================================================
                            	// 文件名称:	Key.asm
                            	// 功能描述：   键盘扫描和取值 
                            	// 完成日期：   2000-12-5
                            	//======================================================
                            	.INCLUDE hardware.inc
                     <      	//========================================================================================
                     <      	// Progarm: The file be included by modules
                     <      	// Arranged by: Andy Hsu
                     <      	// Date: 	2000/06/23: first version
                     <      	//		2000/07/24: modified
                     <      	//		2000/10/20: modified for version 52A chip sacmv25.lib
                     <      	//		2001/10/07: modified for sacmv25f.lib
                     <      	// 		2001/11/06: Independent Queue for A2000/S480/MS01 Manual Mode
                     <      	//		2001/11/06: Fix volume parameter problem - sacmv25i.lib
                     <      	//
                     <      	// For: sacmV25n.lib
                     <      	//
                     <      	//========================================================================================
                     <      	
                     <      	//////////////////////////////////////////////////////////////////
                     <      	// Definitions for I/O Port
                     <      	//////////////////////////////////////////////////////////////////
                     <      	.DEFINE	P_IOA_Data   		0x7000         // Write Data into data register and read from IOA pad
                     <      	.DEFINE P_IOA_Buffer        0x7001         // Write Data into buffer register and read from buffer register
                     <      	.DEFINE P_IOA_Dir           0x7002         // Direction vector for IOA
                     <      	.DEFINE P_IOA_Attrib        0x7003         // Attribute vector for IOA
                     <      	.DEFINE P_IOA_Latch         0x7004         // Latch PortA data for key change wake-up
                     <      	
                     <      	.DEFINE P_IOB_Data         	0x7005         // Write Data into the data register and read from IOB pad
                     <      	.DEFINE P_IOB_Buffer        0x7006         // Write Data into buffer register and read from buffer register
                     <      	.DEFINE P_IOB_Dir           0x7007         // Direction vector for IOB
                     <      	.DEFINE P_IOB_Attrib        0x7008         // Attribute vector for IOB
                     <      	
                     <      	.DEFINE P_FeedBack          0x7009         // Clock form external R,C
                     <      	.DEFINE P_TimerA_Data       0x700A         // Data port for TimerA 
                     <      	.DEFINE P_TimerA_Ctrl       0x700B         // Control Port for TimerA
                     <      	.DEFINE P_TimerB_Data       0x700C         // Data port for TimerB
                     <      	.DEFINE P_TimerB_Ctrl       0x700D         // Control Port for TimerB
                     <      	.DEFINE P_TimeBase_Setup    0x700E         // TimerBase Freq. Set
                     <      	.DEFINE P_TimeBase_Clear	0x700F 		   // Reset Timerbase counter
                     <      	.DEFINE P_INT_Ctrl          0x7010         // Control port for interrupt source
                     <      	.DEFINE P_INT_Clear         0x7011         // Clear interrupt source
                     <      	.DEFINE P_Watchdog_Clear    0x7012         // Watchdog Reset
                     <      	.DEFINE P_SystemClock       0x7013         // Change system clock frequency(include go to standby mode)
                     <      	
                     <      	//... PA6442 New version MC52A (For EC-03)....
                     <      	.DEFINE P_ADC 	        	0x7014         	// Data Port for AD
                     <      	.DEFINE P_ADC_Ctrl          0x7015         	// Control Port for AD control
                     <      	.DEFINE P_ADC_Status        0x7015         	// AD Port Status
                     <      	.DEFINE P_DAC2              0x7016         	// Data Port for DAC2
                     <      	.DEFINE P_PWM               0x7016         	// Data Port for PWM
                     <      	.DEFINE P_DAC1	        	0x7017         	// Data Port for DAC1
                     <      	.DEFINE P_DAC_Ctrl			0x702A 			// Control Port for two DAC and audio output mode
                     <      	//............................................
                     <      	
                     <      	.DEFINE P_IR_Ctrl			0x7018 			// Control Port for IR
                     <      	.DEFINE P_LVD_Ctrl          0x7019         	// Control Port for LVD
                     <      	.DEFINE P_SIO_Data			0x701A 			// Data port for serial IO
                     <      	.DEFINE P_SIO_Addr_Low		0x701B 			// Address Port low
                     <      	.DEFINE P_SIO_Addr_Mid		0x701C 			// Address Port middle
                     <      	.DEFINE P_SIO_Addr_High	 	0x701D 			// Address Port high
                     <      	.DEFINE P_SIO_Ctrl			0x701E 			// Control Port
                     <      	.DEFINE P_SIO_Start			0x701F 			// Start port for serial interface
                     <      	.DEFINE P_SIO_Stop			0x7020 			// Stop port for serial interface
                     <      	
                     <      	.DEFINE P_UART_Command1		 0x7021 		// Command1 Port for UART
                     <      	.DEFINE P_UART_Command2		 0x7022 		// Command2 Port for UART
                     <      	.DEFINE P_UART_Data			 0x7023  		// Data Port for UART
                     <      	.DEFINE	P_UART_BaudScalarLow 0x7024 		// Set Baud Rate scalar low
                     <      	.DEFINE	P_UART_BaudScalarHigh 0x7025 		// Set Baud Rate scalar high
                     <      	
                     <      	
                     <      	//... Definitions for P_INT_Ctrl ..............
                     <      	.DEFINE C_IRQ6_TMB2             0x0001         	// Timer B IRQ6
                     <      	.DEFINE C_IRQ6_TMB1             0x0002         	// Timer A IRQ6
                     <      	.DEFINE C_IRQ5_2Hz              0x0004         	// 2Hz IRQ5
                     <      	.DEFINE C_IRQ5_4Hz              0x0008         	// 4Hz IRQ5
                     <      	.DEFINE C_IRQ4_1KHz             0x0010         	// 1024Hz IRQ4
                     <      	.DEFINE C_IRQ4_2KHz             0x0020         	// 2048Hz IRQ4
                     <      	.DEFINE C_IRQ4_4KHz             0x0040         	// 4096Hz IRQ4
                     <      	.DEFINE C_IRQ3_KEY              0x0080         	// Key Change IRQ3
                     <      	.DEFINE C_IRQ3_EXT1             0x0100         	// Ext1 IRQ3
                     <      	.DEFINE C_IRQ3_EXT2             0x0200         	// Ext2 IRQ3
                     <      	.DEFINE C_IRQ2_TMB              0x0400         	// Timer B IRQ2
                     <      	.DEFINE C_FIQ_TMB               0x0800         	// Timer B FIQ
                     <      	.DEFINE C_IRQ1_TMA              0x1000         	// Timer A IRQ1
                     <      	.DEFINE C_FIQ_TMA               0x2000         	// Timer A FIQ
                     <      	.DEFINE C_IRQ0_PWM              0x4000         	// PWM IRQ0
                     <      	.DEFINE C_FIQ_PWM               0x8000         	// PWM FIQ
                     <      	
                     <      	// Definitions for P_TimerA/B_Ctrl ............                               
                     <      	.DEFINE	C_Fosc_2				0x0000 			// 
                     <      	.DEFINE	C_Fosc_256		    	0x0001 			//
                     <      	.DEFINE	C_32768Hz				0x0002 			//
                     <      	.DEFINE	C_8192Hz				0x0003 			//
                     <      	.DEFINE	C_4096Hz				0x0004 			//
                     <      	.DEFINE	C_A1					0x0005 			//
                     <      	.DEFINE C_A0					0x0006 			//
                     <      	.DEFINE C_Ext1					0x0007 			//
                     <      	
                     <      	.DEFINE	C_2048Hz				0x0000 			//
                     <      	.DEFINE	C_1024Hz				0x0008 			//
                     <      	.DEFINE	C_256Hz					0x0010 			//
                     <      	.DEFINE	C_TMB1Hz				0x0018 			//
                     <      	.DEFINE	C_4Hz					0x0020 			//
                     <      	.DEFINE	C_2Hz					0x0028 			//
                     <      	.DEFINE	C_B1					0x0030 			//
                     <      	.DEFINE	C_Ext2					0x0038 			//
                     <      	
                     <      	.DEFINE	C_Off					0x0000 			//
                     <      	.DEFINE C_D1					0x0040 			//
                     <      	.DEFINE C_D2					0x0080 			//
                     <      	.DEFINE C_D3					0x00C0 			//
                     <      	.DEFINE C_D4					0x0100 			//
                     <      	.DEFINE C_D5					0x0140 			//
                     <      	.DEFINE C_D6					0x0180 			//
                     <      	.DEFINE C_D7					0x01C0 			//
                     <      	.DEFINE C_D8					0x0200 			//
                     <      	.DEFINE C_D9					0x0240 			//
                     <      	.DEFINE C_D10					0x0280 			//
                     <      	.DEFINE C_D11					0x02C0 			//
                     <      	.DEFINE C_D12					0x0300 			//
                     <      	.DEFINE C_D13					0x0340 			//
                     <      	.DEFINE C_D14					0x0380 			//
                     <      	.DEFINE C_TA_Div_2				0x03C0 			// Timer A
                     <      	.DEFINE C_TB_Div_2				0x03C0 			// Timer B
                     <      	
                     <      	//... Definition for P_SystemClock ............
                     <      	.DEFINE C_Fosc					0x0000 			// b3..b0
                     <      	.DEFINE C_Fosc_Div_2			0x0001 			//
                     <      	.DEFINE C_Fosc_Div_4			0x0002 			//
                     <      	.DEFINE C_Fosc_Div_8			0x0003 			// (default)
                     <      	.DEFINE C_Fosc_Div_16			0x0004 			//
                     <      	.DEFINE C_Fosc_Div_32			0x0005 			//
                     <      	.DEFINE C_Fosc_Div_64			0x0006 			//
                     <      	.DEFINE C_Sleep					0x0007 		 	//
                     <      	
                     <      	.DEFINE	C_32K_Work				0x0000 			// b4
                     <      	.DEFINE C_32K_Off				0x0000 			// 
                     <      	.DEFINE C_StrongMode			0x0000 			// b5
                     <      	.DEFINE C_AutoMode				0x0000 			//
                     <      	
                     <      	//... Define for P_AD_Ctrl ....................
                     <      	.DEFINE	C_AD					0x0001 			//
                     <      	.DEFINE C_DA					0x0000 			//
                     <      	.DEFINE C_MIC					0x0000 			//
                     <      	.DEFINE C_LINE					0x0002 			//
                     <      	
                     <      	//... Define for P_DA_Ctrl ....................
                     <      	.DEFINE C_PushPull				0x0000 			// b0, (default) 
                     <      	.DEFINE C_DoubleEnd				0x0001 			// b0
                     <      	.DEFINE	C_DAC_Mode				0x0000 			// b1, (default)
                     <      	.DEFINE C_PWM_Mode				0x0002 			// b1
                     <      	
                     <      	.DEFINE	C_D1_Direct				0x0000 			// DAC1 latch
                     <      	.DEFINE C_D1_LatchA				0x0008 			// 
                     <      	.DEFINE C_D1_LatchB				0x0010 			//
                     <      	.DEFINE C_D1_LatchAB			0x0018 			//
                     <      	
                     <      	.DEFINE	C_D2_Direct				0x0000 			// DAC2 latch
                     <      	.DEFINE C_D2_LatchA				0x0020 			// 
                     <      	.DEFINE C_D2_LatchB				0x0040 			//
                     <      	.DEFINE C_D2_LatchAB			0x00C0 			//
                     <      	
                     <      	//... Define for P_LVD_Ctrl ...................
                     <      	.DEFINE C_LVD24V				0x0000 			// LVD = 2.4V 
                     <      	.DEFINE C_LVD28V				0x0001 			// LVD = 2.8V
                     <      	.DEFINE C_LVD32V				0x0002 			// LVD = 3.2V
                     <      	.DEFINE C_LVD36V				0x0003 			// LVD = 3.6V
                     <      	
                     <      	//////////////////////////////////////////////////
                     <      	// Note: This register will map to the P_INT_Ctrl
                     <      	//	(0x7010), The SACMvxx.lib use this register to
                     <      	//	combine with user's interrupt setting
                     <      	//////////////////////////////////////////////////
                     <      	.EXTERNAL	R_InterruptStatus 
                     <      	//////////////////////////////////////////////////
                     <      	
                     <      	
                     <      	.EXTERNAL 	F_SP_RampUpDAC1
                     <      	.EXTERNAL 	F_SP_RampDnDAC1
                     <      	.EXTERNAL 	F_SP_RampUpDAC2
                     <      	.EXTERNAL 	F_SP_RampDnDAC2
                     <      	
                     <      	.EXTERNAL 	F_SP_InitQueue
                     <      	.EXTERNAL 	F_SP_InitQueue_A2000
                     <      	.EXTERNAL 	F_SP_InitQueue_S480
                     <      	.EXTERNAL 	F_SP_InitQueue_S240
                     <      	.EXTERNAL 	F_SP_InitQueue_MS01
                     <      	.EXTERNAL 	F_SP_InitQueue_DVR
                     <      	
                     <      	.EXTERNAL 	F_SP_ReadQueue
                     <      	.EXTERNAL 	F_SP_ReadQueue_A2000
                     <      	.EXTERNAL 	F_SP_ReadQueue_S480
                     <      	.EXTERNAL 	F_SP_ReadQueue_S240
                     <      	.EXTERNAL 	F_SP_ReadQueue_MS01
                     <      	.EXTERNAL 	F_SP_ReadQueue_DVR
                     <      	
                     <      	.EXTERNAL 	F_SP_WriteQueue
                     <      	.EXTERNAL 	F_SP_WriteQueue_A2000
                     <      	.EXTERNAL 	F_SP_WriteQueue_S480
                     <      	.EXTERNAL 	F_SP_WriteQueue_S240
                     <      	.EXTERNAL 	F_SP_WriteQueue_MS01
                     <      	.EXTERNAL 	F_SP_WriteQueue_DVR
                     <      	
                     <      	.EXTERNAL 	F_SP_TestQueue
                     <      	.EXTERNAL 	F_SP_TestQueue_A2000
                     <      	.EXTERNAL 	F_SP_TestQueue_S480
                     <      	.EXTERNAL 	F_SP_TestQueue_S240
                     <      	.EXTERNAL 	F_SP_TestQueue_MS01
                     <      	.EXTERNAL 	F_SP_TestQueue_DVR
                     <      	
                     <      	.EXTERNAL	F_SP_ReadQueue_NIC		// Read queue with no index change
                     <      	.EXTERNAL	F_SP_ReadQueue_NIC_A2000
                     <      	.EXTERNAL	F_SP_ReadQueue_NIC_S480
                     <      	.EXTERNAL	F_SP_ReadQueue_NIC_S240
                     <      	.EXTERNAL	F_SP_ReadQueue_NIC_MS01
                     <      	.EXTERNAL	F_SP_ReadQueue_NIC_DVR
                     <      	
                     <      	
                     <      	.EXTERNAL	F_SP_SACM_A2000_Init_
                     <      	.EXTERNAL	F_SP_SACM_S480_Init_
                     <      	.EXTERNAL	F_SP_SACM_S240_Init_
                     <      	
                     <      	.EXTERNAL	F_SP_SACM_MS01_Init_
                     <      	.EXTERNAL	F_SP_PlayMode0_
                     <      	.EXTERNAL	F_SP_PlayMode1_
                     <      	.EXTERNAL	F_SP_PlayMode2_
                     <      	.EXTERNAL	F_SP_PlayMode3_
                     <      	
                     <      	.EXTERNAL	F_SP_SACM_DVR_Init_
                     <      	.EXTERNAL 	F_SP_SACM_DVR_Rec_Init_
                     <      	.EXTERNAL 	F_SP_SACM_DVR_Play_Init_
                     <      	
                     <      	.EXTERNAL	F_SP_GetResource
                     <      	
                     <      	//////////////////////////////////////////////////////////////////
                     <      	// Reserve old defintion
                     <      	// Note: Some user who use old library may use the old name
                     <      	//////////////////////////////////////////////////////////////////
                     <      	.EXTERNAL	F_SP_Send_PWM					// Get RAW data 
                     <      	.EXTERNAL	F_SP_Send_DAC1 					// 
                     <      	.EXTERNAL	F_SP_Send_DAC2 					//
                     <      	
                     <      	.EXTERNAL	F_STD_Send_DAC1 				// reserved old
                     <      	.EXTERNAL	F_STD_Send_DAC2 				// reserved old
                     <      	
                     <      	.EXTERNAL 	F_RampUpDAC1					// reserved old
                     <      	.EXTERNAL 	F_RampDnDAC1					// reserved old
                     <      	.EXTERNAL 	F_RampUpDAC2					// reserved old
                     <      	.EXTERNAL  	F_RampDnDAC2					// reserved old
                     <      	///////////////////////////////////////////////////////////////////
                     <      	
                     <      	
                     <      		
                     <      	//========================================================================================        
                     <      	// End of hardware.inc
                     <      	//========================================================================================
00000005                    	.IRAM
00000005 00 00              	.VAR     I_KeyBuf = 0                 //保存键值
00000006 00 00              	.VAR	I_Key_Delay = 0               //扫描有键按下的次数
                            	.EXTERNAL _KeyFlag                    //有键按下标识符
0000815D                    	.CODE
                            	.PUBLIC _SP_Init_IOA;              
                            	_SP_Init_IOA: .PROC
0000815D 09 93 F0 00        	   	R1 = 0x00f0;      
0000815F 19 D3 03 70        	    [P_IOA_Attrib] = R1;    
00008161 19 D3 02 70        	    [P_IOA_Dir] = R1;
00008163 19 D3 00 70        	    [P_IOA_Data] = R1;
00008165 90 9A              	    RETF
                            	.ENDP;
                            	
                            	//============================================================================================
                            	//函数: F_Key_Scan（）
                            	//语法：void F_Key_Scan（）
                            	//描述：键盘扫描函数
                            	//参数：无
                            	//返回：无
                            	//=============================================================================================
                            	.PUBLIC _F_Key_Scan;
                            	_F_Key_Scan: .PROC      
00008166 09 93 F0 00        	    R1 = 0x00F0		                  //扫描键盘
00008168 19 D3 00 70        		[P_IOA_Data] = R1
0000816A 4F 92              	    R1 = 0x000f           
0000816B 11 B3 00 70        	    R1 &= [P_IOA_Data]
0000816D 08 4E              	    JNZ L_Have_Key_Pressed
                            	L_NoKey_Press:                        //无键按下
0000816E 40 92              	    R1 = 0 
0000816F 19 D3 05 00        	    [I_KeyBuf] = R1                   //清键盘缓冲区
00008171 19 D3 02 00        	    [_KeyFlag] = R1
00008173 19 D3 06 00        	    [I_Key_Delay]=R1;
00008175 90 9A              	    RETF
                            	L_Have_Key_Pressed:                  //有键按下处理         
00008176 40 F0 7B 81        	    CALL   F_Key_Scaning             //行扫描确定键
00008178 40 F0 A0 81        	    CALL   Enter_Key;                //确认有键按下
0000817A 90 9A              	    RETF       
                            	    .ENDP
                            	//============================================================================================
                            	//函数: unsigned F_Key_Scaning()
                            	//语法：void unsigned F_Key_Scaning()
                            	//描述：行扫描函数
                            	//参数：无
                            	//返回：扫描键值
                            	//=============================================================================================
                            	.PUBLIC	 F_Key_Scaning;	   
                            	F_Key_Scaning:
                            	F_Key_Scan_B7:   	    
0000817B 0A 95 80 00        	    R2=0x0080                        //扫描第一行
0000817D 1A D5 00 70        		[P_IOA_Data] = R2  
0000817F 4F 92              		R1 = 0x000f	    	   
00008180 11 B3 00 70        	    R1& =[P_IOA_Data]
00008182 40 42              		CMP R1,0x0000                    //是否该行有键按下
00008183 1A 4E              	    JNZ  F_Key_Pressed   	        
                            	F_Key_Scan_B6:
00008184 0A 95 40 00        	    R2=0x0040                        //扫描第二行
00008186 1A D5 00 70        		[P_IOA_Data] = R2
00008188 4F 92              		R1 = 0x000f	    	   
00008189 11 B3 00 70        	    R1& =[P_IOA_Data]
0000818B 40 42              		CMP R1,0x0000                   //是否该行有键按下
0000818C 11 4E              	    JNZ  F_Key_Pressed   
                            	F_Key_Scan_B5:           
0000818D 60 94              	    R2=0x0020                       //扫描第三行
0000818E 1A D5 00 70        		[P_IOA_Data] = R2
00008190 4F 92              		R1 = 0x000f	    	   
00008191 11 B3 00 70        	    R1& =[P_IOA_Data] 
00008193 40 42              		CMP R1,0x0000                   //是否该行有键按下
00008194 09 4E              	    JNZ  F_Key_Pressed   
                            	F_Key_Scan_B4:
00008195 50 94              		R2=0x0010                       //扫描第四行
00008196 1A D5 00 70        		[P_IOA_Data] = R2
00008198 4F 92              		R1 = 0x000f	    	   
00008199 11 B3 00 70        	    R1& =[P_IOA_Data]
0000819B 40 42              		CMP R1,0x0000                  //是否该行有键按下
0000819C 01 4E              	    JNZ  F_Key_Pressed   
0000819D 90 9A              		RETF		
                            	F_Key_Pressed:	
0000819E 01 A5              	    R2|=R1                         //R2--B11~B8:输出   R1--B0~B7,输入
0000819F 90 9A              	    RETF
                            	
                            	//============================================================================================
                            	//函数: Enter_Key（）
                            	//语法：Enter_Key（）
                            	//描述：确定有键按下函数
                            	//参数：无
                            	//返回：无
                            	//============================================================================================
                            	Enter_Key:
                            	Scan_first:
000081A0 13 97 06 00        	    R3 = [I_Key_Delay]
000081A2 40 46              	    CMP R3,0x0000
000081A3 06 4E              	    JNZ L_Scan_many;
000081A4 1A D5 05 00        	    [I_KeyBuf] = R2;
000081A6 41 06              	    R3 += 1;
000081A7 1B D7 06 00        	    [I_Key_Delay] = R3;
000081A9 90 9A              	    RETF;
                            	L_Scan_many:                         //去抖
000081AA 11 93 05 00        	    R1 = [I_KeyBuf]        
000081AC 02 43              	    CMP R1,R2
000081AD 0F 4E              	    JNE L_Error_Key_pro;
000081AE 13 97 06 00        	    R3 = [I_Key_Delay]
000081B0 41 06              	    R3 += 1;
000081B1 1B D7 06 00        	    [I_Key_Delay] = R3;		
000081B3 50 46              		CMP		R3, 0x0010;         
000081B4 01 5E              		JE		L_Enter_Have_KeyDown;
000081B5 90 9A              		RETF;
                            	L_Enter_Have_KeyDown:
000081B6 41 92              		R1 = 1;
000081B7 19 D3 02 00        	    [_KeyFlag] = R1	
000081B9 40 96              	    R3 = 0;
000081BA 1B D7 06 00        	    [I_Key_Delay]=R3	
000081BC 90 9A              	    RETF
                            	L_Error_Key_pro:
000081BD 40 96              	    R3 = 0;
000081BE 1B D7 06 00        	    [I_Key_Delay]=R3
000081C0 1B D7 05 00        		[I_KeyBuf] = R3
000081C2 90 9A              		RETF;
                            		    
                            	//============================================================================================
                            	//函数: unsigned F_Get_Key()
                            	//语法：unsigned F_Get_Key()
                            	//描述：取键值函数
                            	//参数：无
                            	//返回：键值
                            	//============================================================================================
                            	.PUBLIC		_F_Get_Key;       
                            	_F_Get_Key:    .PROC
000081C3 41 96              	    R3 = 1
000081C4 12 95 05 00        	    R2 = [I_KeyBuf]
                            	L_Key_value_Loop:
000081C6 0B 0B D4 81        	    BP = R3 + Key_Table
000081C8 C5 92              	    R1 = [bp]
000081C9 02 43              	    CMP R1,R2
000081CA 04 5E              	    JE L_KeyCode_Return
000081CB 41 06              	    R3 += 1
000081CC 52 46              	   CMP R3,18
                            	   // CMP R3,11
000081CD 48 8E              	    JBE L_Key_value_Loop
000081CE 40 96              	    R3=0
                            	L_KeyCode_Return:
000081CF 40 92              	    R1 = 0;
000081D0 19 D3 05 00        	    [I_KeyBuf] = R1; 
000081D2 03 93              	    R1=R3     
000081D3 90 9A              	    RETF                             //清键盘缓冲区
                            	    .endp    
                            	 
                            	            
                            	 Key_Table:
                            	 //.DW  0x0088,0x0084,0x0082,0x0081
                            	 //.DW  0x0048,0x0044,0x0042,0x0041
                            	 //.DW  0x0028,0x0024,0x0022,0x0021
                            	 //.DW  0x0018,0x0014,0x0012,0x0011
                            	 
000081D4 11 00 21 00        	 .DW  0x0011,0x0021,0x0041,0x0081
         41 00 81 00
000081D8 12 00 22 00        	 .DW  0x0012,0x0022,0x0042,0x0082
         42 00 82 00
000081DC 14 00 24 00        	 .DW  0x0014,0x0024,0x0044,0x0084
         44 00 84 00
000081E0 18 00 28 00        	 .DW  0x0018,0x0028,0x0048,0x0088
         48 00 88 00
                            	 
                            	  //  .DW 0x0000,0x0014,0x0024,0x0044
                            	  //  .DW 0x0012,0x0022,0x0042,0x0011
                            	  //  .DW 0x0021,0x0041,0x0028,0x0018
                            	  //  .DW 0x0081,0x0082,0x0084,0x0048      
                            	
                            	  
                            	  
0 error(s), 0 warning(s).

