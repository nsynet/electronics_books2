Sunplus u'nSP Assembler - Ver. 1.8.0
              Listing File Has Been Relocated
                            	//====================================================================================//
                            	// 文件名:    system.asm
                            	// 描  述：   该文件的程序主要用于初始化SPCE061A和PDIUSBD12，以及对PDIUSBD12的读写操作
                            	// 日  期：   2003/04/03
                            	//====================================================================================//
                            	.include hardware.inc; 
                     <      	//========================================================================================
                     <      	// Progarm: The file be included by modules
                     <      	// Arranged by: Andy Hsu
                     <      	// Date: 	2000/06/23: first version
                     <      	//		2000/07/24: modified
                     <      	//		2000/10/20: modified for version 52A
                     <      	//========================================================================================
                     <      	//////////////////////////////////////////////////////////////////
                     <      	// Definitions for I/O Port
                     <      	//////////////////////////////////////////////////////////////////
                     <      	.DEFINE	P_IOA_Data   		0x7000;        // Write Data into data register and read from IOA pad
                     <      	.DEFINE P_IOA_Buffer        0x7001;        // Write Data into buffer register and read from buffer register
                     <      	.DEFINE P_IOA_Dir           0x7002;        // Direction vector for IOA
                     <      	.DEFINE P_IOA_Attrib        0x7003;        // Attribute vector for IOA
                     <      	.DEFINE P_IOA_Latch         0x7004;        // Latch PortA data for key change wake-up
                     <      	
                     <      	.DEFINE P_IOB_Data         	0x7005;        // Write Data into the data register and read from IOB pad
                     <      	.DEFINE P_IOB_Buffer        0x7006;        // Write Data into buffer register and read from buffer register
                     <      	.DEFINE P_IOB_Dir           0x7007;        // Direction vector for IOB
                     <      	.DEFINE P_IOB_Attrib        0x7008;        // Attribute vector for IOB
                     <      	
                     <      	.DEFINE P_FeedBack          0x7009;        // Clock form external R,C
                     <      	.DEFINE P_TimerA_Data       0x700A;        // Data port for TimerA 
                     <      	.DEFINE P_TimerA_Ctrl       0x700B;        // Control Port for TimerA
                     <      	.DEFINE P_TimerB_Data       0x700C;        // Data port for TimerB
                     <      	.DEFINE P_TimerB_Ctrl       0x700D;        // Control Port for TimerB
                     <      	.DEFINE P_TimeBase_Setup    0x700E;        // TimerBase Freq. Set
                     <      	.DEFINE P_TimeBase_Clear	0x700F;		   // Reset Timerbase counter
                     <      	.DEFINE P_INT_Ctrl          0x7010;        // Control port for interrupt source
                     <      	.DEFINE P_INT_Ctrl_New		0x702D;
                     <      	.DEFINE P_INT_Clear         0x7011;        // Clear interrupt source
                     <      	.DEFINE P_Watchdog_Clear    0x7012;        // Watchdog Reset
                     <      	.DEFINE P_SystemClock       0x7013;        // Change system clock frequency(include go to standby mode)
                     <      	
                     <      	//... PA6442 Old version (for EC-02) ...........
                     <      	//.DEFINE P_ADDA               0x7014;        //10-bit DA(W) AD(R)
                     <      	//.DEFINE P_DAC1               0x7014;        //
                     <      	//.DEFINE P_AD_Ctrl            0x7015;        //AD/DA control
                     <      	//.DEFINE P_AD_Status          0x7015;        //AD status
                     <      	//.DEFINE P_DAC2               0x7016;        //DAC channel 2
                     <      	//.DEFINE P_PWM                0x7016;        //PWM output
                     <      	//.DEFINE P_DA_Ctrl            0x7017;        //DAC latch control
                     <      	
                     <      	//... PA6442 New version MC52A (For EC-03)....
                     <      	.DEFINE P_ADC 	        	0x7014;        	// Data Port for AD
                     <      	.DEFINE P_ADC_Ctrl          0x7015;        	// Control Port for AD control
                     <      	.DEFINE P_ADC_Status        0x7015;        	// AD Port Status
                     <      	.DEFINE P_DAC2              0x7016;        	// Data Port for DAC2
                     <      	.DEFINE P_PWM               0x7016;        	// Data Port for PWM
                     <      	.DEFINE P_DAC1	        	0x7017;        	// Data Port for DAC1
                     <      	.DEFINE P_DAC_Ctrl			0x702A;			// Control Port for two DAC and audio output mode
                     <      	//............................................
                     <      	
                     <      	.DEFINE P_IR_Ctrl			0x7018;			// Control Port for IR
                     <      	.DEFINE P_LVD_Ctrl          0x7019;        	// Control Port for LVD
                     <      	
                     <      	.DEFINE P_SIO_Addr_Low		0x701B;			// Address Port low
                     <      	.DEFINE P_SIO_Addr_Mid		0x701C;			// Address Port middle
                     <      	.DEFINE P_SIO_Addr_High	 	0x701D;			// Address Port high
                     <      	.DEFINE P_SIO_Ctrl			0x701E;			// Control Port
                     <      	.DEFINE P_SIO_Start			0x701F;			// Start port for serial interface
                     <      	.DEFINE P_SIO_Stop			0x7020;			// Stop port for serial interface
                     <      	
                     <      	.DEFINE P_UART_Command1		 0x7021;		// Command1 Port for UART
                     <      	.DEFINE P_UART_Command2		 0x7022;		// Command2 Port for UART
                     <      	.DEFINE P_UART_Data			 0x7023; 		// Data Port for UART
                     <      	.DEFINE	P_UART_BaudScalarLow 0x7024;		// Set Baud Rate scalar low
                     <      	.DEFINE	P_UART_BaudScalarHigh 0x7025;		// Set Baud Rate scalar high
                     <      	
                     <      	
                     <      	
                     <      	
                     <      	
                     <      	//... Definitions for P_INT_Ctrl ..............
                     <      	.DEFINE C_IRQ6_TMB2             0x0001;        	// Timer B IRQ6
                     <      	.DEFINE C_IRQ6_TMB1             0x0002;        	// Timer A IRQ6
                     <      	.DEFINE C_IRQ5_2Hz              0x0004;        	// 2Hz IRQ5
                     <      	.DEFINE C_IRQ5_4Hz              0x0008;        	// 4Hz IRQ5
                     <      	.DEFINE C_IRQ4_1KHz             0x0010;        	// 1024Hz IRQ4
                     <      	.DEFINE C_IRQ4_2KHz             0x0020;        	// 2048Hz IRQ4
                     <      	.DEFINE C_IRQ4_4KHz             0x0040;        	// 4096Hz IRQ4
                     <      	.DEFINE C_IRQ3_KEY              0x0080;        	// Key Change IRQ3
                     <      	.DEFINE C_IRQ3_EXT1             0x0100;        	// Ext1 IRQ3
                     <      	.DEFINE C_IRQ3_EXT2             0x0200;        	// Ext2 IRQ3
                     <      	.DEFINE C_IRQ2_TMB              0x0400;        	// Timer B IRQ2
                     <      	.DEFINE C_FIQ_TMB               0x0800;        	// Timer B FIQ
                     <      	.DEFINE C_IRQ1_TMA              0x1000;        	// Timer A IRQ1
                     <      	.DEFINE C_FIQ_TMA               0x2000;        	// Timer A FIQ
                     <      	.DEFINE C_IRQ0_PWM              0x4000;        	// PWM IRQ0
                     <      	.DEFINE C_FIQ_PWM               0x8000;        	// PWM FIQ
                     <      	
                     <      	// Definitions for P_TimerA/B_Ctrl ............                               
                     <      	.DEFINE	C_Fosc_2				0x0000;			// 
                     <      	.DEFINE	C_Fosc_256		    	0x0001;			//
                     <      	.DEFINE	C_32768Hz				0x0002;			//
                     <      	.DEFINE	C_8192Hz				0x0003;			//
                     <      	.DEFINE	C_4096Hz				0x0004;			//
                     <      	.DEFINE	C_A1					0x0005;			//
                     <      	.DEFINE C_A0					0x0006;			//
                     <      	.DEFINE C_Ext1					0x0007;			//
                     <      	
                     <      	.DEFINE	C_2048Hz				0x0000;			//
                     <      	.DEFINE	C_1024Hz				0x0008;			//
                     <      	.DEFINE	C_256Hz					0x0010;			//
                     <      	.DEFINE	C_TMB1Hz				0x0018;			//
                     <      	.DEFINE	C_4Hz					0x0020;			//
                     <      	.DEFINE	C_2Hz					0x0028;			//
                     <      	.DEFINE	C_B1					0x0030;			//
                     <      	.DEFINE	C_Ext2					0x0038;			//
                     <      	
                     <      	.DEFINE	C_Off					0x0000;			//
                     <      	.DEFINE C_D1					0x0040;			//
                     <      	.DEFINE C_D2					0x0080;			//
                     <      	.DEFINE C_D3					0x00C0;			//
                     <      	.DEFINE C_D4					0x0100;			//
                     <      	.DEFINE C_D5					0x0140;			//
                     <      	.DEFINE C_D6					0x0180;			//
                     <      	.DEFINE C_D7					0x01C0;			//
                     <      	.DEFINE C_D8					0x0200;			//
                     <      	.DEFINE C_D9					0x0240;			//
                     <      	.DEFINE C_D10					0x0280;			//
                     <      	.DEFINE C_D11					0x02C0;			//
                     <      	.DEFINE C_D12					0x0300;			//
                     <      	.DEFINE C_D13					0x0340;			//
                     <      	.DEFINE C_D14					0x0380;			//
                     <      	.DEFINE C_TA_Div_2				0x03C0;			// Timer A
                     <      	.DEFINE C_TB_Div_2				0x03C0;			// Timer B
                     <      	
                     <      	//... Definition for P_SystemClock ............
                     <      	.DEFINE C_Fosc					0x0000;			// b3..b0
                     <      	.DEFINE C_Fosc_Div_2			0x0001;			//
                     <      	.DEFINE C_Fosc_Div_4			0x0002;			//
                     <      	.DEFINE C_Fosc_Div_8			0x0003;			// (default)
                     <      	.DEFINE C_Fosc_Div_16			0x0004;			//
                     <      	.DEFINE C_Fosc_Div_32			0x0005;			//
                     <      	.DEFINE C_Fosc_Div_64			0x0006;			//
                     <      	.DEFINE C_Sleep					0x0007;		 	//
                     <      	
                     <      	.DEFINE	C_32K_Work				0x0000;			// b4
                     <      	.DEFINE C_32K_Off				0x0000;			// 
                     <      	.DEFINE C_StrongMode			0x0000;			// b5
                     <      	.DEFINE C_AutoMode				0x0000;			//
                     <      	
                     <      	//... Define for P_AD_Ctrl ....................
                     <      	.DEFINE	C_AD					0x0001;			//
                     <      	.DEFINE C_DA					0x0000;			//
                     <      	.DEFINE C_MIC					0x0000;			//
                     <      	.DEFINE C_LINE					0x0002;			//
                     <      	
                     <      	//... Define for P_DA_Ctrl ....................
                     <      	.DEFINE C_PushPull				0x0000;			// b0, (default) 
                     <      	.DEFINE C_DoubleEnd				0x0001;			// b0
                     <      	.DEFINE	C_DAC_Mode				0x0000;			// b1, (default)
                     <      	.DEFINE C_PWM_Mode				0x0002;			// b1
                     <      	
                     <      	.DEFINE	C_D1_Direct				0x0000;			// DAC1 latch
                     <      	.DEFINE C_D1_LatchA				0x0008;			// 
                     <      	.DEFINE C_D1_LatchB				0x0010;			//
                     <      	.DEFINE C_D1_LatchAB			0x0018;			//
                     <      	
                     <      	.DEFINE	C_D2_Direct				0x0000;			// DAC2 latch
                     <      	.DEFINE C_D2_LatchA				0x0020;			// 
                     <      	.DEFINE C_D2_LatchB				0x0040;			//
                     <      	.DEFINE C_D2_LatchAB			0x00C0;			//
                     <      	
                     <      	//... Define for P_LVD_Ctrl ...................
                     <      	.DEFINE C_LVD24V				0x0000;			// LVD = 2.4V 
                     <      	.DEFINE C_LVD28V				0x0001;			// LVD = 2.8V
                     <      	.DEFINE C_LVD32V				0x0002;			// LVD = 3.2V
                     <      	.DEFINE C_LVD36V				0x0003;			// LVD = 3.6V
                     <      	
                     <      	
                     <      	.EXTERNAL	F_SP_Read_INT_Status;			// for further use
                     <      	.EXTERNAL 	F_SP_Write_INT_Status;			// for further use
                     <      	.EXTERNAL  	F_SP_Set_INT_Vector;			// for further use
                     <      	.EXTERNAL	F_SP_Clear_INT_Vector;			// for further use
                     <      	
                     <      	.EXTERNAL	F_SP_Send_Out;					//
                     <      	.EXTERNAL	F_SP_Send_DAC1;					//
                     <      	.EXTERNAL	F_SP_Send_DAC2;					//
                     <      	.EXTERNAL	F_SP_Send_Two_DAC;				//
                     <      	.EXTERNAL	F_SP_Init_HW;					//
                     <      	
                     <      	.EXTERNAL	R_InterruptStatus;
                     <      	
                     <      	
                     <      	.EXTERNAL 	F_SP_RampUpDAC1;
                     <      	.EXTERNAL 	F_SP_RampDnDAC1;
                     <      	.EXTERNAL 	F_SP_RampUpDAC2;
                     <      	.EXTERNAL  	F_SP_RampDnDAC2;
                     <      	
                     <      	.EXTERNAL 	F_SP_InitQueue;
                     <      	.EXTERNAL 	F_SP_ReadQueue;
                     <      	.EXTERNAL 	F_SP_WriteQueue;
                     <      	.EXTERNAL 	F_SP_TestQueue;
                     <      	
                     <      	
                     <      	
                     <      	.EXTERNAL	F_SP_Get_ADC
                     <      	
                     <      	.EXTERNAL 	F_SP_Set_P_TimerA_Ctrl
                     <      	.EXTERNAL 	F_SP_Set_P_TimerA_Data
                     <      	.EXTERNAL 	F_SP_Set_P_TimerB_Ctrl
                     <      	.EXTERNAL 	F_SP_Set_P_TimerB_Data
                     <      	.EXTERNAL 	F_SP_Set_P_INT_Ctrl
                     <      	.EXTERNAL 	F_SP_Set_P_INT_Clear
                     <      	.EXTERNAL 	F_SP_Set_P_SystemClock
                     <      	.EXTERNAL 	F_SP_Set_P_DAC_Ctrl
                     <      	.EXTERNAL 	F_SP_Set_P_ADC_Ctrl
                     <      	
                     <      		
                     <      	
                     <      	//--------------------------------------------
                     <      	SACM_MACRO1: 	.MACRO
                     <      		
                     <      		.ENDM
                     <      	
                     <      	SACM_MACRO2:	.MACRO
                     <      		
                     <      		.ENDM
                     <      	
                     <      	//========================================================================================        
                     <      	// add by abin for easy programming
                     <      	//========================================================================================
                     <      	
                     <      	.define FoscCLK_20 	0x00;		  //Fosc=20.480MHz
                     <      	.define FoscCLK_24 	0x20;		  //Fosc=24.576MHz
                     <      	.define FoscCLK_32 	0x40;		  //Fosc=32.768MHz
                     <      	.define FoscCLK_40 	0x60;		  //Fosc=40.960MHz
                     <      	.define FoscCLK_49 	0x80;		  //Fosc=49.152MHz
                     <      	
                     <      	.define CPUCLK_Fosc      0x00;    //CPUClk选Fosc
                     <      	.define CPUCLK_Fosc2     0x01;    //CPUClk选Fosc/2
                     <      	.define CPUCLK_Fosc4     0x02;    //CPUClk选Fosc/4
                     <      	.define CPUCLK_Fosc8     0x03;    //CPUClk选Fosc/8
                     <      	.define CPUCLK_Fosc16    0x04;    //CPUClk选Fosc/16
                     <      	.define CPUCLK_Fosc32    0x05;    //CPUClk选Fosc/32
                     <      	.define CPUCLK_Fosc64    0x06;    //CPUClk选Fosc/64
                     <      	
                     <      	
                     <      	//========================================================================================        
                     <      	// End of hardware.inc
                     <      	//========================================================================================
                            	//for led
                            	.public _F_TurnOnFirstLed
                            	.public _F_TurnOffFirstLed
                            	.public _F_TurnOnSecondLed
                            	.public _F_TurnOffSecondLed
                            	//for d12
                            	.public _F_InitWriteD12
                            	.public _F_InitReadD12
                            	.public _F_ReadD12 
                            	.public _F_WriteCmdOrDataToD12
                            	//for system
                            	.public _F_System_Initial
                            	.public _F_Interrupt_On
                            	.public _F_Delay
                            	.public _F_Interrupt_Off
                            	
                            	.define Fosc_CLK_RATE 	FoscCLK_49      //选择不同Fosc信号频率
                            	.define CPU_CLK_RATE    CPUCLK_Fosc  	//改变CPUClk频率
                            	
00008B6C                    	.code 	
                            	//====================================================================
                            	// 函  数:    F_System_Initial()
                            	// 语  法:    void F_System_Initial(void) (for c)
                            	// 描  述:    该函数用于初始化SPCE061A的中断、时钟、I/0、复位PDIUSBD12
                            	//			  初始化:
                            	//			  IOB0,IOB1为同相高电平输出
                            	//			  IOB2=INT_N＝1为带上拉电阻的输入
                            	//			  IOB3=RESET_N=1为同相高电平输出
                            	//            IOB8=CS_N=1同相高电平输出
                            	//            IOB6=ALE=0同相低电平输出
                            	//			  IOB5=WR_N=1为同相高电平输出
                            	//			  IOB4=RD_N=1为同相高电平输出
                            	// 参  数：   无  
                            	// 返回值：   无
                            	//=====================================================================
                            	_F_System_Initial: .PROC
00008B6C 88 D2              		    PUSH r1,r1 TO [sp];
00008B6D 40 F1              		    INT OFF;
00008B6E 09 93 00 01        		    r1=0x0100; 				//开中断IRQ3_EXT1
00008B70 19 D3 10 70        		    [P_INT_Ctrl]=r1; 
                            		    //[P_INT_Ctrl_New]=r1; 
00008B72 09 93 80 00        		    r1=Fosc_CLK_RATE;       //
00008B74 40 A2              			r1|=CPU_CLK_RATE;       //设置系统时钟      	
00008B75 19 D3 13 70        		    [P_SystemClock]=r1;	
                            		    
00008B77 09 93 FF FF        		    r1=0xFFFF;				//设置IOA为同相高电平输出
00008B79 19 D3 02 70        		    [P_IOA_Dir]=r1;
00008B7B 19 D3 03 70        		    [P_IOA_Attrib]=r1;
00008B7D 19 D3 00 70        		    [P_IOA_Data]=r1;
00008B7F 09 93 F0 FF        		   	r1=0xFFF0;				//设置IOB的高12位为同相高电平输出，低四位为上拉输入
00008B81 19 D3 07 70        		    [P_IOB_Dir]=r1;
00008B83 19 D3 08 70        		    [P_IOB_Attrib]=r1;
00008B85 09 93 FF FF        		    r1=0xFFFF;
00008B87 19 D3 05 70        		    [P_IOB_Data]=r1;
00008B89 40 F0 8D 8B        		    CALL _F_USB_Io_Initial;   
00008B8B 88 90              		    POP r1,r1 FROM [sp];
00008B8C 90 9A              		   	RETF; 
                            			.ENDP;
                            			
                            	_F_USB_Io_Initial: .PROC
                            	
00008B8D 88 D2              			PUSH r1,r1 TO [sp];
                            			
00008B8E 11 93 02 70        			r1 = [P_IOA_Dir];
00008B90 09 B3 FF 00        			r1&=0x00FF; 
00008B92 19 D3 02 70        			[P_IOA_Dir]=r1;
                            			
00008B94 11 93 03 70        			r1=[P_IOA_Attrib];
00008B96 09 B3 FF 00        			r1&=0x00FF;				//设置IOA8-IOA15为带上拉电阻地输入
00008B98 19 D3 03 70        			[P_IOA_Attrib]=r1;
                            			
00008B9A 11 93 01 70        			r1=[P_IOA_Buffer];
00008B9C 09 A3 00 FF        			r1|=0xFF00;            
00008B9E 19 D3 01 70        			[P_IOA_Buffer]=r1; 
                            		
00008BA0 11 93 07 70        			r1=[P_IOB_Dir];//IOB8低输出，IOB6低输出，IOB5、IOB4高输出,IOB3高输出，IOB2上拉输入。
00008BA2 09 A3 78 01        			r1|=0x0178;
00008BA4 09 B3 FD FF        			r1&=0xFFFD;
00008BA6 19 D3 07 70        			[P_IOB_Dir]=r1;
                            			
00008BA8 11 93 08 70        			r1=[P_IOB_Attrib];
00008BAA 09 A3 78 01        			r1|=0x0178;
00008BAC 09 B3 FD FF        			r1&=0xFFFD;
00008BAE 19 D3 08 70        			[P_IOB_Attrib]=r1;
                            			
00008BB0 11 93 06 70        			r1=[P_IOB_Buffer];//IOB8=CS_N=0,IOB6=ALE=0,IOB5=WR_N=1,IOB4=RD_N=1,IOB3=RESET_N=0,IOB2=1
00008BB2 74 A2              			r1|=0x0034; 
00008BB3 09 B3 F7 FE        			R1&=0xFEF7;            
00008BB5 19 D3 06 70        		    [P_IOB_Buffer]=r1;     
                            	
00008BB7 40 F0 C6 8B        		    call F_Delay;//系统复位延时。
                            		    
00008BB9 11 93 06 70        		    r1=[P_IOB_Buffer];//IOB8=CS_N=0,IOB6=ALE=0,IOB5=WR_N=1,IOB4=RD_N=1,IOB3=RESET_N=0,IOB2=1
00008BBB 7C A2              		    r1|=0x003C; 
00008BBC 09 B3 FF FE        			R1&=0xFEFF;            
00008BBE 19 D3 06 70        		    [P_IOB_Buffer]=r1;
                            	
00008BC0 88 90              			POP  r1,r1 FROM [sp];
00008BC1 90 9A              			RETF
                            			.ENDP
                            	//====================================================================
                            	// 函  数:    	F_Interrupt_On()
                            	// 语  法:    	void F_Interrupt_On(void) (for c)
                            	// 描  述:    	开中断函数
                            	// 参  数：   	无  
                            	// 返回值：		无
                            	// 使用寄存器：	无
                            	//=====================================================================
                            	
                            	_F_Interrupt_On: .PROC
                            	F_Interrupt_On:
00008BC2 41 F1              			int irq;
00008BC3 90 9A              		    retf; 
                            			.endp; 
                            	//====================================================================
                            	// 函  数:    	F_Interrupt_Off()
                            	// 语  法:    	void F_Interrupt_Off(void) (for c)
                            	// 描  述:   	开中断函数
                            	// 参  数：   	无
                            	// 返回值：   	无
                            	// 使用寄存器：	无
                            	//=====================================================================
                            	_F_Interrupt_Off: .PROC
                            	F_Interrupt_Off:
00008BC4 40 F1              		    int off; 
00008BC5 90 9A              		    retf;
                            			.endp; 
                            	
                            	//====================================================================
                            	// 函  数:    	F_Delay()
                            	// 语  法:    	void F_Delay(void) (for c)
                            	// 描  述:   	延时函数
                            	// 参  数：   	无
                            	// 返回值：   	无
                            	//=====================================================================
                            	_F_Delay: .proc
                            	F_Delay: 
00008BC6 90 D4              		    push r1,r2 to [sp];
00008BC7 4F 94              		    r2=0x000f;
                            		Loop1:
00008BC8 09 93 FF FF        		    r1=0xffff;
                            		Loop2:    
00008BCA 41 22              		    r1-=1;
00008BCB 42 4E              		    jnz Loop2;
00008BCC 41 24              		    r2-=1;
00008BCD 46 4E              		    jnz Loop1;
00008BCE 00 EE              		    nop;
00008BCF 90 90              		    pop r1,r2 from [sp];
00008BD0 90 9A              		    retf;
                            			.endp
                            	
                            	//====================================================================
                            	// 函  数:    	F_TurnOffFirstLed()
                            	// 语  法:    	void F_TurnOffFirstLed(void) (for c)
                            	// 描  述:   	熄灭与IOA0相连的LED
                            	// 参  数：   	无
                            	// 返回值：   	无
                            	//=====================================================================
                            	_F_TurnOffFirstLed: .proc
00008BD1 88 D2              			push r1 to [sp];
00008BD2 11 93 01 70        			r1=[P_IOA_Buffer];
00008BD4 09 B3 FE FF        			r1&=0xFFFE;
00008BD6 19 D3 01 70        			[P_IOA_Buffer]=r1;
00008BD8 88 90              			pop r1 from [sp];
00008BD9 90 9A              			retf
                            			.endp
                            	
                            	
                            	//====================================================================
                            	// 函  数:    	F_TurnOffFirstLed()
                            	// 语  法:    	void F_TurnOffFirstLed(void)
                            	// 描  述:   	点亮与IOA0相连的LED
                            	// 参  数：   	无
                            	// 返回值：   	无
                            	//=====================================================================
                            	_F_TurnOnFirstLed: .proc
00008BDA 88 D2              			push r1 to [sp];
00008BDB 11 93 01 70        			r1=[P_IOA_Buffer];
00008BDD 41 A2              			r1|=0x0001;
00008BDE 19 D3 01 70        			[P_IOA_Buffer]=r1;
00008BE0 88 90              			pop r1 from [sp];
00008BE1 90 9A              			retf;
                            			.endp
                            	
                            	//====================================================================
                            	// 函  数:    	SP_TurnOffFirstLed()
                            	// 语  法:    	void SP_TurnOffFirstLed(void)
                            	// 描  述:   	熄灭与IOA1相连的LED
                            	// 参  数：   	无
                            	// 返回值：   	无
                            	//=====================================================================
                            	_F_TurnOffSecondLed: .proc
00008BE2 88 D2              			push r1 to [sp];
00008BE3 11 93 01 70        			r1=[P_IOA_Buffer];
00008BE5 09 B3 FD FF        			r1&=0xFFFD;
00008BE7 19 D3 01 70        			[P_IOA_Buffer]=r1;
00008BE9 88 90              			pop r1 from [sp];
00008BEA 90 9A              			retf;
                            			.endp
                            	
                            	
                            	//====================================================================
                            	// 函  数:    	SP_TurnOffFirstLed()
                            	// 语  法:    	void SP_TurnOffFirstLed(void)
                            	// 描  述:   	点亮与IOA1相连的LED
                            	// 参  数：   	无
                            	// 返回值：   	无
                            	//=====================================================================
                            	_F_TurnOnSecondLed: .proc
00008BEB 88 D2              			push r1 to [sp];
00008BEC 11 93 01 70        			r1=[P_IOA_Buffer];
00008BEE 42 A2              			r1|=0x0002;
00008BEF 19 D3 01 70        			[P_IOA_Buffer]=r1;
00008BF1 88 90              			pop r1 from [sp];
00008BF2 90 9A              			retf;
                            			.endp
                            			 
                            	//====================================================================
                            	// 函  数:    	F_InitWriteD12()
                            	// 语  法:    	void F_TurnOffFirstLed(void)
                            	// 描  述:   	初始化写PDIUSBD12
                            	// 参  数：   	无
                            	// 返回值：   	无
                            	//=====================================================================
                            	_F_InitWriteD12: .proc
00008BF3 88 D2              			push r1,r1 to [sp];
                            			
00008BF4 11 93 02 70        			r1 = [P_IOA_Dir];
00008BF6 09 A3 00 FF        			r1|=0xFF00; 
00008BF8 19 D3 02 70        			[P_IOA_Dir]=r1;
                            			
00008BFA 11 93 03 70        			r1=[P_IOA_Attrib];
00008BFC 09 A3 00 FF        			r1|=0xFF00;				//Port IOA15- IOA8: 同相高电平输出
00008BFE 19 D3 03 70        			[P_IOA_Attrib]=r1;
                            			
00008C00 11 93 01 70        			r1=[P_IOA_Buffer];
00008C02 09 A3 00 FF        			r1|=0xFF00;            
00008C04 19 D3 01 70        			[P_IOA_Buffer]=r1; 
                            			
00008C06 11 93 06 70        			r1=[P_IOB_Buffer];//IOB8=CS_N=0,IOB6=ALE=0,IOB5=WR_N=1,IOB4=RD_N=1,IOB3=RESET_N=1,IOB2=1
00008C08 74 A2              			r1|=0x0034; 
00008C09 09 B3 FF FE        			R1&=0xFEFF;            
00008C0B 19 D3 06 70        		    [P_IOB_Buffer]=r1;  
                            	   
00008C0D 88 90              	        pop r1,r1 from [sp];
00008C0E 90 9A              	        retf ;
                            	        .endp
                            	//====================================================================
                            	// 函  数:    	F_InitReadD12()
                            	// 语  法:    	void F_InitReadD12(void)
                            	// 描  述:   	初始化读PDIUSBD12
                            	// 参  数：   	无
                            	// 返回值：   	无
                            	//=====================================================================
                            	_F_InitReadD12:          .PROC
00008C0F 88 D2              			push r1,r1 to [sp];
                            	 
                            	 
00008C10 11 93 02 70        	 		r1 = [P_IOA_Dir];
00008C12 09 B3 FF 00        			r1&=0x00FF; 
00008C14 19 D3 02 70        			[P_IOA_Dir]=r1;
                            			
00008C16 11 93 03 70        			r1=[P_IOA_Attrib];
00008C18 09 A3 00 FF        			r1|=0xFF00;				//Port IOA15- IOA8: 设置为悬浮式输入input(FL)
00008C1A 19 D3 03 70        			[P_IOA_Attrib]=r1;
                            			
00008C1C 11 93 01 70        			r1=[P_IOA_Buffer];
00008C1E 09 B3 FF 00        			r1&=0x00FF;            
00008C20 19 D3 01 70        			[P_IOA_Buffer]=r1; 
                            			
00008C22 11 93 06 70        			r1=[P_IOB_Buffer];//IOB8=CS_N=0,IOB6=ALE=0,IOB5=WR_N=1,IOB4=RD_N=1,IOB3=RESET_N=1,IOB2=1
00008C24 74 A2              			r1|=0x0034; 
00008C25 09 B3 FF FE        			R1&=0xFEFF;            
00008C27 19 D3 06 70        		    [P_IOB_Buffer]=r1;   
00008C29 88 90              	        pop r1,r1 from [sp]; 
00008C2A 90 9A              	        retf 
                            	        .ENDP
                            	
                            	//====================================================================
                            	// 函  数:    	F_ReadD12()
                            	// 语  法:    	void F_ReadD12(unsigned int D_Addr)
                            	// 描  述:   	从PDIUSBD12读数据
                            	// 参  数：   	D_Addr：为偶地址0xff02
                            	// 返回值：   	r1
                            	//=====================================================================
                            	_F_ReadD12:      .PROC
00008C2B 88 DA              	        push bp to [sp]; 
00008C2C 08 0B 01 00        	        bp = sp + 1 ;
00008C2E 03 92              	        r1 = [bp+3] ;            // D12 Address
00008C2F 40 F0 33 8C        	        call	F_ReadD12;       // r1: return value
00008C31 88 98              	        pop bp from [sp] ;
00008C32 90 9A              	        retf ;
                            	        .ENDP
                            	           
                            	F_ReadD12:
00008C33 90 D6              	        push r2,r3 to [sp];
                            	        
00008C34 59 93              	        r1 = r1 lsl 4;           // move 02  to IOA8-IOA15
00008C35 59 93              	        r1 = r1 lsl 4;  
00008C36 12 95 00 70        	        r2 = [P_IOA_Data];
00008C38 0A B5 FF 00        	        r2&= 0x00FF;
00008C3A 02 A3              	        r1|=r2;
00008C3B 19 D3 00 70        	        [P_IOA_Data] = r1;       // 送偶地址到D12
                            	        
00008C3D 13 97 06 70        	        r3=[P_IOB_Buffer];
00008C3F 0B B7 FF FE        	        r3&=0xFEFF;				// CS_N=0, ALE=1,WR_N=1,RD_N=1;RESET_N=1,INT_N=1
00008C41 0B A7 7C 00        	        r3|=0x007C;
00008C43 1B D7 06 70        	        [P_IOB_Buffer] = r3;     
                            	        
00008C45 13 97 06 70        	        r3=[P_IOB_Buffer];
00008C47 0B B7 BF FE        	        r3&=0xFEBF;				// CS_N=0, ALE=0,WR_N=1,RD_N=1;RESET_N=1,INT_N=1
00008C49 7C A6              	        r3|=0x003C;
00008C4A 1B D7 06 70        	        [P_IOB_Buffer] = r3;   
                            	        
00008C4C 13 97 06 70        	        r3=[P_IOB_Buffer];
00008C4E 0B B7 AF FE        	        r3&=0xFEAF;				// CS_N=0, ALE=0,WR_N=1,RD_N=0;RESET_N=1,INT_N=1
00008C50 6C A6              	        r3|=0x002C;
00008C51 1B D7 06 70        	        [P_IOB_Buffer] = r3;   
00008C53 00 EE              	        nop;
00008C54 11 93 00 70        	        r1 = [P_IOA_Data];       // Get data
00008C56 79 93              	        r1 = r1 lsr 4;           // Prepare high 8 bits Addr. to low 8 bits
00008C57 79 93              	        r1 = r1 lsr 4;           // Get low byte data
                            	       
00008C58 12 95 06 70        	        r2 = [P_IOB_Buffer];
00008C5A 0A B5 BF FE        	        r2 &=0xFEBF
00008C5C 7C A4              	        r2 |= 0x003C;             // CS_N=0,ALE=0,WR_N=1,RD_N=1 ;RESET_N=1,INT_N=1
00008C5D 1A D5 06 70        	        [P_IOB_Buffer] = r2;     // 
                            	        
00008C5F 90 92              			pop r2,r3 from [sp];     // don't pop r1(return value)   
00008C60 90 9A              	        retf ;
                            	//===================================================================================================
                            	// 函  数:    	F_WriteCmdOrDataToD12()
                            	// 语  法:    	void F_WriteCmdOrDataToD12(unsigned int D_or_C_Addr,unsigned int Data_or_Command)
                            	// 描  述:   	向PDIUSBD12写数据或命令
                            	// 参  数：   	D_or_C_Addr:地址参数；Data_or_Command：命令或数据参数
                            	// 返回值：   	无
                            	//===================================================================================================
                            	_F_WriteCmdOrDataToD12: .PROC
00008C61 88 DA              	        push bp to [sp] ;
00008C62 08 0B 01 00        	        bp = sp + 1; 
00008C64 90 D4              	        push r1,r2 to [sp];
00008C65 03 92              	        r1 = [bp+3];              // Address
00008C66 04 94              	        r2 = [bp+4] ;             // Data
00008C67 40 F0 6C 8C        	        call	F_WriteCmdOrDataToD12;
00008C69 90 90              	        pop r1,r2 from [sp];
00008C6A 88 98              	        pop bp from [sp] ;
00008C6B 90 9A              	        retf ;
                            	        .ENDP
                            	F_WriteCmdOrDataToD12:
00008C6C 98 D6              	        push r1,r3 to [sp];
                            	        
00008C6D 59 93              	        r1 = r1 lsl 4;
00008C6E 59 93              	        r1 = r1 lsl 4; 
00008C6F 5A 95              	        r2 = r2 lsl 4;          // shift low 8 bits data to high 8 bits
00008C70 5A 95              	        r2 = r2 lsl 4;          //       
00008C71 13 97 01 70        	        r3 = [P_IOA_Buffer];
00008C73 0B B7 FF 00        	        r3 &=0x00FF;
00008C75 03 A3              	        r1 |=r3;
00008C76 19 D3 01 70        	        [P_IOA_Buffer] = r1;      // move 02 or 03 Addr to IOA8-IOA15    
                            	        
00008C78 11 93 06 70        	        r1 = [P_IOB_Buffer];
00008C7A 09 B3 FF FE        	        r1&=0xFEFF;
00008C7C 09 A3 7C 00        	        r1|=0x007C;              // CS_N=0,ALE=IOA7=1,WR_N=1,RD_N=1,RESET_N=1,INT_N=1
00008C7E 19 D3 06 70        	        [P_IOB_Buffer] = r1;      // ALE=1
                            	        
00008C80 11 93 06 70        	        r1 = [P_IOB_Buffer];
00008C82 09 B3 BF FE        	        r1&=0xFEBF;
00008C84 7C A2              	        r1|=0x003C;              // CS_N=0,ALE=0,WR_N=1,RD_N=1,RESET_N=1,INT_N=1
00008C85 19 D3 06 70        	        [P_IOB_Buffer] = r1;      // 在ALE 下降沿的时候，D12锁定地址;
                            	        
00008C87 11 93 01 70        			r1= [P_IOA_Buffer];
00008C89 09 B3 FF 00        			r1&=0x00FF;
00008C8B 01 A5              			r2|=r1;
00008C8C 1A D5 01 70        	        [P_IOA_Buffer] = r2;    // 准备数据写入D12
                            	
00008C8E 11 93 06 70        	        r1 = [P_IOB_Buffer];
00008C90 09 B3 9F FE        	        r1&=0xFE9F; 				// CS_N=0,ALE=0,WR_N=0,RD_N=1;RESET_N=1,INT_N=1
00008C92 5C A2              	        r1|=0x001C
00008C93 19 D3 06 70        	        [P_IOB_Buffer] = r1;      
                            	
00008C95 11 93 06 70        			r1 = [P_IOB_Buffer];
00008C97 09 B3 BF FE        			r1&=0xFEBF; 				// CS_N=0,ALE=0,WR_N=1,RD_N=1;RESET_N=1,INT_N=1
00008C99 7C A2              	        r1|=0x003C
00008C9A 19 D3 06 70        	        [P_IOB_Buffer]=r1;
                            	
                            	
00008C9C 98 90              	        pop r1,r3 from [sp];
00008C9D 90 9A              	        retf; 
                            	
                            	.PUBLIC _F_Clear_WatchDog
                            	_F_Clear_WatchDog:
00008C9E 88 D2              			PUSH r1 TO [SP];
00008C9F 41 92              			r1=0x0001;
00008CA0 19 D3 12 70        			[P_Watchdog_Clear]=r1;
00008CA2 88 90              			POP r1 FROM [SP];
00008CA3 90 9A              			RETF;
0 error(s), 0 warning(s).










