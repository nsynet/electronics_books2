Sunplus u'nSP Assembler - Ver. 1.8.0
              Listing File Has Been Relocated
                            	//=======================================//
                            	//函数名称：unsigned UART(char *Psend)
                            	//出口参数：1.测试成功0、测试失败
                            	//无入口参数
                            	//硬件连接：A口B口短接
                            	//=====================================// 
                            	.include hardware.inc
                     <      	//========================================================================================
                     <      	// Progarm: The file be included by modules
                     <      	// Arranged by: Andy Hsu
                     <      	// Date: 	2000/06/23: first version
                     <      	//		2000/07/24: modified
                     <      	//		2000/10/20: modified for version 52A
                     <      	//========================================================================================
                     <      	//////////////////////////////////////////////////////////////////
                     <      	// Definitions for I/O Port
                     <      	//////////////////////////////////////////////////////////////////
                     <      	.DEFINE	P_IOA_Data   		0x7000;        // Write Data into data register and read from IOA pad
                     <      	.DEFINE P_IOA_Buffer        0x7001;        // Write Data into buffer register and read from buffer register
                     <      	.DEFINE P_IOA_Dir           0x7002;        // Direction vector for IOA
                     <      	.DEFINE P_IOA_Attrib        0x7003;        // Attribute vector for IOA
                     <      	.DEFINE P_IOA_Latch         0x7004;        // Latch PortA data for key change wake-up
                     <      	
                     <      	.DEFINE P_IOB_Data         	0x7005;        // Write Data into the data register and read from IOB pad
                     <      	.DEFINE P_IOB_Buffer        0x7006;        // Write Data into buffer register and read from buffer register
                     <      	.DEFINE P_IOB_Dir           0x7007;        // Direction vector for IOB
                     <      	.DEFINE P_IOB_Attrib        0x7008;        // Attribute vector for IOB
                     <      	
                     <      	.DEFINE P_FeedBack          0x7009;        // Clock form external R,C
                     <      	.DEFINE P_TimerA_Data       0x700A;        // Data port for TimerA 
                     <      	.DEFINE P_TimerA_Ctrl       0x700B;        // Control Port for TimerA
                     <      	.DEFINE P_TimerB_Data       0x700C;        // Data port for TimerB
                     <      	.DEFINE P_TimerB_Ctrl       0x700D;        // Control Port for TimerB
                     <      	.DEFINE P_TimeBase_Setup    0x700E;        // TimerBase Freq. Set
                     <      	.DEFINE P_TimeBase_Clear	0x700F;		   // Reset Timerbase counter
                     <      	.DEFINE P_INT_Ctrl          0x7010;        // Control port for interrupt source
                     <      	.DEFINE P_INT_Clear         0x7011;        // Clear interrupt source
                     <      	.DEFINE P_Watchdog_Clear    0x7012;        // Watchdog Reset
                     <      	.DEFINE P_SystemClock       0x7013;        // Change system clock frequency(include go to standby mode)
                     <      	
                     <      	//... PA6442 Old version (for EC-02) ...........
                     <      	//.DEFINE P_ADDA               0x7014;        //10-bit DA(W) AD(R)
                     <      	//.DEFINE P_DAC1               0x7014;        //
                     <      	//.DEFINE P_AD_Ctrl            0x7015;        //AD/DA control
                     <      	//.DEFINE P_AD_Status          0x7015;        //AD status
                     <      	//.DEFINE P_DAC2               0x7016;        //DAC channel 2
                     <      	//.DEFINE P_PWM                0x7016;        //PWM output
                     <      	//.DEFINE P_DA_Ctrl            0x7017;        //DAC latch control
                     <      	
                     <      	//... PA6442 New version MC52A (For EC-03)....
                     <      	.DEFINE P_ADC 	        	0x7014;        	// Data Port for AD
                     <      	.DEFINE P_ADC_Ctrl          0x7015;        	// Control Port for AD control
                     <      	.DEFINE P_ADC_Status        0x7015;        	// AD Port Status
                     <      	.DEFINE P_DAC2              0x7016;        	// Data Port for DAC2
                     <      	.DEFINE P_PWM               0x7016;        	// Data Port for PWM
                     <      	.DEFINE P_DAC1	        	0x7017;        	// Data Port for DAC1
                     <      	.DEFINE P_DAC_Ctrl			0x702A;			// Control Port for two DAC and audio output mode
                     <      	//............................................
                     <      	
                     <      	.DEFINE P_IR_Ctrl			0x7018;			// Control Port for IR
                     <      	.DEFINE P_LVD_Ctrl          0x7019;        	// Control Port for LVD
                     <      	
                     <      	.DEFINE P_SIO_Addr_Low		0x701B;			// Address Port low
                     <      	.DEFINE P_SIO_Addr_Mid		0x701C;			// Address Port middle
                     <      	.DEFINE P_SIO_Addr_High	 	0x701D;			// Address Port high
                     <      	.DEFINE P_SIO_Ctrl			0x701E;			// Control Port
                     <      	.DEFINE P_SIO_Start			0x701F;			// Start port for serial interface
                     <      	.DEFINE P_SIO_Stop			0x7020;			// Stop port for serial interface
                     <      	.DEFINE P_SIO_Data			0x701A;	
                     <      	.DEFINE P_UART_Command1		 0x7021;		// Command1 Port for UART
                     <      	.DEFINE P_UART_Command2		 0x7022;		// Command2 Port for UART
                     <      	.DEFINE P_UART_Data			 0x7023; 		// Data Port for UART
                     <      	.DEFINE	P_UART_BaudScalarLow 0x7024;		// Set Baud Rate scalar low
                     <      	.DEFINE	P_UART_BaudScalarHigh 0x7025;		// Set Baud Rate scalar high
                     <      	
                     <      	
                     <      	//... Definitions for P_INT_Ctrl ..............
                     <      	.DEFINE C_IRQ6_TMB2             0x0001;        	// Timer B IRQ6
                     <      	.DEFINE C_IRQ6_TMB1             0x0002;        	// Timer A IRQ6
                     <      	.DEFINE C_IRQ5_2Hz              0x0004;        	// 2Hz IRQ5
                     <      	.DEFINE C_IRQ5_4Hz              0x0008;        	// 4Hz IRQ5
                     <      	.DEFINE C_IRQ4_1KHz             0x0010;        	// 1024Hz IRQ4
                     <      	.DEFINE C_IRQ4_2KHz             0x0020;        	// 2048Hz IRQ4
                     <      	.DEFINE C_IRQ4_4KHz             0x0040;        	// 4096Hz IRQ4
                     <      	.DEFINE C_IRQ3_KEY              0x0080;        	// Key Change IRQ3
                     <      	.DEFINE C_IRQ3_EXT1             0x0100;        	// Ext1 IRQ3
                     <      	.DEFINE C_IRQ3_EXT2             0x0200;        	// Ext2 IRQ3
                     <      	.DEFINE C_IRQ2_TMB              0x0400;        	// Timer B IRQ2
                     <      	.DEFINE C_FIQ_TMB               0x0800;        	// Timer B FIQ
                     <      	.DEFINE C_IRQ1_TMA              0x1000;        	// Timer A IRQ1
                     <      	.DEFINE C_FIQ_TMA               0x2000;        	// Timer A FIQ
                     <      	.DEFINE C_IRQ0_PWM              0x4000;        	// PWM IRQ0
                     <      	.DEFINE C_FIQ_PWM               0x8000;        	// PWM FIQ
                     <      	
                     <      	// Definitions for P_TimerA/B_Ctrl ............                               
                     <      	.DEFINE	C_Fosc_2				0x0000;			// 
                     <      	.DEFINE	C_Fosc_256		    	0x0001;			//
                     <      	.DEFINE	C_32768Hz				0x0002;			//
                     <      	.DEFINE	C_8192Hz				0x0003;			//
                     <      	.DEFINE	C_4096Hz				0x0004;			//
                     <      	.DEFINE	C_A1					0x0005;			//
                     <      	.DEFINE C_A0					0x0006;			//
                     <      	.DEFINE C_Ext1					0x0007;			//
                     <      	
                     <      	.DEFINE	C_2048Hz				0x0000;			//
                     <      	.DEFINE	C_1024Hz				0x0008;			//
                     <      	.DEFINE	C_256Hz					0x0010;			//
                     <      	.DEFINE	C_TMB1Hz				0x0018;			//
                     <      	.DEFINE	C_4Hz					0x0020;			//
                     <      	.DEFINE	C_2Hz					0x0028;			//
                     <      	.DEFINE	C_B1					0x0030;			//
                     <      	.DEFINE	C_Ext2					0x0038;			//
                     <      	
                     <      	.DEFINE	C_Off					0x0000;			//
                     <      	.DEFINE C_D1					0x0040;			//
                     <      	.DEFINE C_D2					0x0080;			//
                     <      	.DEFINE C_D3					0x00C0;			//
                     <      	.DEFINE C_D4					0x0100;			//
                     <      	.DEFINE C_D5					0x0140;			//
                     <      	.DEFINE C_D6					0x0180;			//
                     <      	.DEFINE C_D7					0x01C0;			//
                     <      	.DEFINE C_D8					0x0200;			//
                     <      	.DEFINE C_D9					0x0240;			//
                     <      	.DEFINE C_D10					0x0280;			//
                     <      	.DEFINE C_D11					0x02C0;			//
                     <      	.DEFINE C_D12					0x0300;			//
                     <      	.DEFINE C_D13					0x0340;			//
                     <      	.DEFINE C_D14					0x0380;			//
                     <      	.DEFINE C_TA_Div_2				0x03C0;			// Timer A
                     <      	.DEFINE C_TB_Div_2				0x03C0;			// Timer B
                     <      	
                     <      	//... Definition for P_SystemClock ............
                     <      	.DEFINE C_Fosc					0x0000;			// b3..b0
                     <      	.DEFINE C_Fosc_Div_2			0x0001;			//
                     <      	.DEFINE C_Fosc_Div_4			0x0002;			//
                     <      	.DEFINE C_Fosc_Div_8			0x0003;			// (default)
                     <      	.DEFINE C_Fosc_Div_16			0x0004;			//
                     <      	.DEFINE C_Fosc_Div_32			0x0005;			//
                     <      	.DEFINE C_Fosc_Div_64			0x0006;			//
                     <      	.DEFINE C_Sleep					0x0007;		 	//
                     <      	
                     <      	.DEFINE	C_32K_Work				0x0000;			// b4
                     <      	.DEFINE C_32K_Off				0x0000;			// 
                     <      	.DEFINE C_StrongMode			0x0000;			// b5
                     <      	.DEFINE C_AutoMode				0x0000;			//
                     <      	
                     <      	//... Define for P_AD_Ctrl ....................
                     <      	.DEFINE	C_AD					0x0001;			//
                     <      	.DEFINE C_DA					0x0000;			//
                     <      	.DEFINE C_MIC					0x0000;			//
                     <      	.DEFINE C_LINE					0x0002;			//
                     <      	
                     <      	//... Define for P_DA_Ctrl ....................
                     <      	.DEFINE C_PushPull				0x0000;			// b0, (default) 
                     <      	.DEFINE C_DoubleEnd				0x0001;			// b0
                     <      	.DEFINE	C_DAC_Mode				0x0000;			// b1, (default)
                     <      	.DEFINE C_PWM_Mode				0x0002;			// b1
                     <      	
                     <      	.DEFINE	C_D1_Direct				0x0000;			// DAC1 latch
                     <      	.DEFINE C_D1_LatchA				0x0008;			// 
                     <      	.DEFINE C_D1_LatchB				0x0010;			//
                     <      	.DEFINE C_D1_LatchAB			0x0018;			//
                     <      	
                     <      	.DEFINE	C_D2_Direct				0x0000;			// DAC2 latch
                     <      	.DEFINE C_D2_LatchA				0x0020;			// 
                     <      	.DEFINE C_D2_LatchB				0x0040;			//
                     <      	.DEFINE C_D2_LatchAB			0x00C0;			//
                     <      	
                     <      	//... Define for P_LVD_Ctrl ...................
                     <      	.DEFINE C_LVD24V				0x0000;			// LVD = 2.4V 
                     <      	.DEFINE C_LVD28V				0x0001;			// LVD = 2.8V
                     <      	.DEFINE C_LVD32V				0x0002;			// LVD = 3.2V
                     <      	.DEFINE C_LVD36V				0x0003;			// LVD = 3.6V
                     <      	
                     <      	
                     <      	.EXTERNAL	F_SP_Read_INT_Status;			// for further use
                     <      	.EXTERNAL 	F_SP_Write_INT_Status;			// for further use
                     <      	.EXTERNAL  	F_SP_Set_INT_Vector;			// for further use
                     <      	.EXTERNAL	F_SP_Clear_INT_Vector;			// for further use
                     <      	
                     <      	.EXTERNAL	F_SP_Send_Out;					//
                     <      	.EXTERNAL	F_SP_Send_DAC1;					//
                     <      	.EXTERNAL	F_SP_Send_DAC2;					//
                     <      	.EXTERNAL	F_SP_Send_Two_DAC;				//
                     <      	.EXTERNAL	F_SP_Init_HW;					//
                     <      	
                     <      	.EXTERNAL	R_InterruptStatus;
                     <      	
                     <      	
                     <      	.EXTERNAL 	F_SP_RampUpDAC1;
                     <      	.EXTERNAL 	F_SP_RampDnDAC1;
                     <      	.EXTERNAL 	F_SP_RampUpDAC2;
                     <      	.EXTERNAL  	F_SP_RampDnDAC2;
                     <      	
                     <      	.EXTERNAL 	F_SP_InitQueue;
                     <      	.EXTERNAL 	F_SP_ReadQueue;
                     <      	.EXTERNAL 	F_SP_WriteQueue;
                     <      	.EXTERNAL 	F_SP_TestQueue;
                     <      	
                     <      	
                     <      	
                     <      	.EXTERNAL	F_SP_Get_ADC
                     <      	
                     <      	.EXTERNAL 	F_SP_Set_P_TimerA_Ctrl
                     <      	.EXTERNAL 	F_SP_Set_P_TimerA_Data
                     <      	.EXTERNAL 	F_SP_Set_P_TimerB_Ctrl
                     <      	.EXTERNAL 	F_SP_Set_P_TimerB_Data
                     <      	.EXTERNAL 	F_SP_Set_P_INT_Ctrl
                     <      	.EXTERNAL 	F_SP_Set_P_INT_Clear
                     <      	.EXTERNAL 	F_SP_Set_P_SystemClock
                     <      	.EXTERNAL 	F_SP_Set_P_DAC_Ctrl
                     <      	.EXTERNAL 	F_SP_Set_P_ADC_Ctrl
                     <      	
                     <      		
                     <      	
                     <      	//--------------------------------------------
                     <      	SACM_MACRO1: 	.MACRO
                     <      		
                     <      		.ENDM
                     <      	
                     <      	SACM_MACRO2:	.MACRO
                     <      		
                     <      		.ENDM
                     <      	
                     <      	
                     <      	
                     <      	
                     <      	//.define PC_Play_Enable_A2000		1    	// Enable the PC-Play function for SACM-A2000 module
                     <      	//.define PC_Play_Enable_S480		1    	// Enable the PC-Play function for SACM-S480 module
                     <      	//.define PC_Play_Enable_S240		1    	// Enable the PC-Play function for SACM-S240 module    
                     <      	//.define PC_Play_Enable_MS01		1    	// Enable the PC-Play function for SACM-MS01 module
                     <      	
                     <      	
                     <      	
                     <      	//========================================================================================        
                     <      	// End of hardware.inc
                     <      	//========================================================================================
                            	
0000F537                    	.data   //发送的数据
0000F537 AA 00 55 00        	    SendData:.dw 0x00aa,0x0055,0x00a5,0x005a,0x00aa
         A5 00 5A 00
         AA 00      
00000000                    	.isram
                            	.public  RecData    //接收数据缓冲区
00000000 00 00 00 00        	 RecData: .dw  5 dup(0);
         00 00 00 00
         00 00      
                            	 
00000005 00 00              	 .var recNum        //接收数据个数
00000006 00 00              	 .var sendNum       //发送数据个数
                            	 
0000CA1F                    	.code
                            	.public _UART;
                            	_UART:    
0000CA1F 09 93 FF FF        	   	r1=0xffff                 
0000CA21 19 D3 07 70        		[P_IOB_Dir]=r1
0000CA23 19 D3 08 70        		[P_IOB_Attrib]=r1
                            	//	r1=0x0000
                            	//	[P_IOB_Data]=r1
                            	    
0000CA25 09 93 FF FF        	    r1=0xffff                 
0000CA27 19 D3 05 70        		[P_IOB_Data]=r1
                            	  
0000CA29 00 EE              	    nop;
0000CA2A 00 EE              	    nop;
0000CA2B 00 EE              	    nop;
0000CA2C 00 EE              	    nop;
0000CA2D 00 EE              	    nop;  
                            	   // r2 = [P_IOA_Data]
                            		  
0000CA2E 40 94              	    r2 = RecData;   
                            	    
                            	_UART_INIT:		
                            	F_UART_INIT:
                            		
0000CA2F 40 F1              	    int off;
0000CA30 40 92              		R1 = 0x0000;		    //关闭中断	
0000CA31 19 D3 10 70        		[P_INT_Ctrl] = R1;   
                            	
0000CA33 09 93 80 04        		R1 = 0x0480;		    //设置IOB7为输入IOB10为输出
0000CA35 19 D3 08 70        		[P_IOB_Attrib] = R1;
0000CA37 09 93 00 04        		R1 = 0x0400;
0000CA39 19 D3 07 70        		[P_IOB_Dir] = R1;
0000CA3B 40 92              		R1 = 0x0000;	
0000CA3C 19 D3 05 70        		[P_IOB_Data] = R1;
                            	    
0000CA3E 09 93 6B 00        		R1 = 0x006b;		    //设置波特率 114.84KHz(~=115.2KHz)
0000CA40 19 D3 24 70        		[P_UART_BaudScalarLow] = R1;
0000CA42 40 92              		R1 = 0x0000;
0000CA43 19 D3 25 70        		[P_UART_BaudScalarHigh] = R1;
                            		
                            		
0000CA45 40 92              		R1 = 0x0000;
0000CA46 0C 99 C0 00        		R4 = 0x00C0;	      //使能RX和TX
0000CA48 19 D3 21 70        		[P_UART_Command1] = R1;
0000CA4A 1C D9 22 70        		[P_UART_Command2] = R4;
                            		
                            	
                            	
                            		
0000CA4C 40 96              		R3 = 0x00;
0000CA4D 40 9A              		bp = 0x0000
0000CA4E C6 DB              		[sendNum] = bp
0000CA4F C5 DB              	    [recNum] = bp
                            		
                            	L_sendData:
                            		
                            	L_Check_TxRDY:
0000CA50 0C 99 37 F5        	    R4 = SendData;				//准备发送数据
0000CA52 C6 9B              	    bp = [sendNum] 	
0000CA53 41 26              		R3 -= 1;
0000CA54 27 5E              		jz	L_TxRDY_TimeOut;
                            	
0000CA55 45 4A              	    cmp bp,5                    //发送是否结束
0000CA56 0F 5E              	    je L_Check_RxRDY;           
                            	    
0000CA57 11 93 22 70        		R1 = [P_UART_Command2];    
0000CA59 09 B3 40 00        		R1 &= 0x0040;			      //检测 TxRDY = 1;
0000CA5B 0A 5E              		JZ L_Check_RxRDY;
0000CA5C 05 09              	    r4 = r4 + bp
0000CA5D C4 98              		r4 = [r4]
0000CA5E 00 EE              	    nop;
0000CA5F 00 EE              	    nop;
0000CA60 00 EE              	    nop;
0000CA61 1C D9 23 70        		[P_UART_Data] = R4;	          //发送数据
                            	    
0000CA63 41 0A              	    bp += 1     
0000CA64 C6 DB              	    [sendNum] = bp                //发送数据的个数      
                            	    
                            	L_recData:      
0000CA65 40 96              		R3 = 0x00;
                            	L_Check_RxRDY:
                            		
0000CA66 41 26              		R3 -= 1;
0000CA67 14 5E              		jz	L_RxRDY_TimeOut;
                            	    
0000CA68 C5 9B              	    bp = [recNum]
0000CA69 0D 05 00 00        	    r2 =  bp + RecData            
                            	    
0000CA6B 11 93 22 70        		R1 = [P_UART_Command2];			//检测是否有数据接收
0000CA6D 09 B3 80 00        		R1 &= 0x0080;
0000CA6F 60 5E              		JZ L_Check_TxRDY;
                            		                                //接收自己发送的8位十六进制数
0000CA70 40 92              		r1 = 0x0000;
                            		//... Get data .................
0000CA71 11 93 23 70        		R1 = [P_UART_Data];				//取接收的数据
                            	    
0000CA73 C2 D2              	    [r2] = r1;    
0000CA74 41 0A              	    bp += 1
0000CA75 C5 DB              	    [recNum] = bp                   //数据是否全部接收
0000CA76 45 4A              	    cmp bp ,5
0000CA77 52 4E              	    jne L_Check_RxRDY
                            	    
0000CA78 40 92              	    R1 = 0x0000;
0000CA79 19 D3 22 70        	    [P_UART_Command2] = R1;        //禁止接收
0000CA7B 00 EE              	    jmp L_TxRDY_TimeOut
                            	
                            		
                            	L_TxRDY_TimeOut:
                            	L_RxRDY_TimeOut:		
0000CA7C 40 F0 7F CA        	    call CmpRecSend;
0000CA7E 90 9A              		retf;
                            	
                            	//==============================//
                            	//函数名称：CmpRecSend:
                            	
                            	//比较发送数据与接收数据是否相等
                            	//==============================//
                            	CmpRecSend:
0000CA7F C5 9B              	   bp = [recNum] 
0000CA80 41 2A              	   bp -= 1
                            	loopCmp:   
0000CA81 0D 07 00 00        	   r3 = bp + RecData
0000CA83 0D 09 37 F5        	   r4 = bp + SendData
                            	  // r3 -= 1 
0000CA85 C3 96              	   r3 = [r3] 
0000CA86 C4 98              	   r4 = [r4]
0000CA87 04 47              	   cmp r3,r4;
0000CA88 06 4E              	   jne UartFail;
0000CA89 41 2A              	   bp -= 1 
0000CA8A 0D 4B FF FF        	   cmp bp,0xffff
0000CA8C 4C 4E              	   jne loopCmp; 
                            	   //int irq
                            	   //fiq on     
0000CA8D 41 92              	   r1 = 0x0001  //成功
0000CA8E 90 9A              	   retf
                            	 UartFail:
0000CA8F 40 92              	   r1 = 0x0000;   //失败
0000CA90 90 9A              	 retf;
0 error(s), 0 warning(s).










