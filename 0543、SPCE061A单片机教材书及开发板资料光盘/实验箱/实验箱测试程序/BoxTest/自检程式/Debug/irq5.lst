Sunplus u'nSP Assembler - Ver. 1.8.0
              Listing File Has Been Relocated
                            	.define     P_System_Clock  0x7013
                            	.define		P_INT_CTRL		0x7010;
                            	.define 	P_INT_CTRL_NEW	0x702D;
                            	.define		P_INT_CLEAR		0x7011;
                            	.define		P_IOB_DATA  	0x7005;
                            	.define		P_IOB_DIR   	0x7007;
                            	.define		P_IOB_ATTRI		0x7008;
                            	.external ClearWatchDog
                            	.external _keyfind;
                            	.external R_InterruptStatus
                            	.include	S480.inc
                     <      	//////////////////////////////////////////////////////////////////////////////////////////
                     <      	// Progarm: SACM-S480 API external definition
                     <      	// Writen by: Andy
                     <      	// Date: 2000/06/20
                     <      	//			2001/02/10
                     <      	//////////////////////////////////////////////////////////////////////////////////////////
                     <      	.external F_SACM_S480_Initial;
                     <      	.external F_SACM_S480_ServiceLoop;
                     <      	.external F_SACM_S480_Play;
                     <      	.external F_SACM_S480_Stop;
                     <      	.external F_SACM_S480_Pause;
                     <      	.external F_SACM_S480_Resume;
                     <      	
                     <      	.external F_SACM_S480_VolumeUp;
                     <      	.external F_SACM_S480_VolumeDn;
                     <      		
                     <      	.external F_SACM_S480_SpeechStatus;
                     <      	
                     <      	.external F_SACM_S480_PcPlayInitial;
                     <      	
                     <      	.external F_FIQ_Service_SACM_S480;
                     <      	
                     <      	
                     <      	//========================================================================================        
                     <      	// End of S480.inc
                     <      	//========================================================================================
                            	.include	Resource.inc
                     <      	
                     <      	// Resource Table
                     <      	// Created by IDE, Do not modify this table
                     <      	
0000824C             <      	.TEXT
                     <      	.external _RES_Table;
                     <      	.external _RES_1_48K_SA;
                     <      	.external _RES_1_48K_EA;
                     <      	.external _RES_2_48K_SA;
                     <      	.external _RES_2_48K_EA;
                     <      	.external _RES_3_48K_SA;
                     <      	.external _RES_3_48K_EA;
                     <      	.external _RES_4_48K_SA;
                     <      	.external _RES_4_48K_EA;
                     <      	.external _RES_5_48K_SA;
                     <      	.external _RES_5_48K_EA;
                     <      	.external _RES_6_48K_SA;
                     <      	.external _RES_6_48K_EA;
                     <      	.external _RES_7_48K_SA;
                     <      	.external _RES_7_48K_EA;
                     <      	.external _RES_8_48K_SA;
                     <      	.external _RES_8_48K_EA;
                     <      	.external _RES_9_48K_SA;
                     <      	.external _RES_9_48K_EA;
                     <      	.external _RES_10_48K_SA;
                     <      	.external _RES_10_48K_EA;
                     <      	.external _RES_11_48K_SA;
                     <      	.external _RES_11_48K_EA;
                     <      	.external _RES_12_48K_SA;
                     <      	.external _RES_12_48K_EA;
                     <      	.external _RES_13_48K_SA;
                     <      	.external _RES_13_48K_EA;
                     <      	.external _RES_14_48K_SA;
                     <      	.external _RES_14_48K_EA;
                     <      	.external _RES_15_48K_SA;
                     <      	.external _RES_15_48K_EA;
                     <      	.external _RES_01_48K_SA;
                     <      	.external _RES_01_48K_EA;
                     <      	.external _RES_16_48K_SA;
                     <      	.external _RES_16_48K_EA;
                     <      	.external _RES_08_48K_SA;
                     <      	.external _RES_08_48K_EA;
                     <      	
                     <      	// End Table
                            	.external   _RF_RT,Originally_Data,Originally_Data1,Originally_Data2,Originally_Data3
                            	.external  One_Flag ,_Zero_Flag_R,_Step_R,_First_R,__Last_R,Step,first,_Last
                            	.external  _Originally_Data_T,_One_Flag_T,_Zero_Flag_T_T,_Step_T,_First_T
00000000                    	.RAM
                            	
0000CB39                    	.code
                            	.public _Initirq5
                            	_Initirq5:
0000CB39 40 F1              		int off 
                            	//	r1=0x0098
                            	 //   [P_System_Clock]=r1
                            	//	r1=[R_InterruptStatus]
                            	//	r1|=0x8			    //开中断IRQ5_4Hz和IRQ5_2Hz
0000CB3A 48 92              	    r1=0x0008
0000CB3B 19 D3 5C 02        	    [R_InterruptStatus]=r1
0000CB3D 19 D3 10 70        		[P_INT_CTRL]=r1 
0000CB3F 19 D3 2D 70        		[P_INT_CTRL_NEW]=r1 
0000CB41 40 92              		R1=0 
0000CB42 40 F0 33 CB        		call ClearWatchDog
0000CB44 41 F1              		int	irq 
0000CB45 90 9A              	    retf;
                            	 .public _SP_INT_64Hz
                            	.public F_SP_INT_64Hz;
                            	 _SP_INT_64Hz:
                            	 F_SP_INT_64Hz:
0000CB46 48 F1              	     irq off
0000CB47 43 92              	     R1 = 0x0003;
0000CB48 19 D3 0E 70        	     [P_TimeBase_Setup]=r1
0000CB4A 11 93 2D 70        	     r1 = [P_INT_CTRL_NEW]
0000CB4C 42 A2              	     r1 |= 0x0002 						//开中断IRQ6_TMB1和IRQ6_TMB2
0000CB4D 19 D3 2D 70        		 [P_INT_CTRL_NEW]= r1 
0000CB4F 40 F0 33 CB        	     call ClearWatchDog
0000CB51 41 F1              		 int IRQ
0000CB52 49 F1              	     irq on
0000CB53 90 9A              	     retf;
                            	     
                            	 .public _Turnoff_INT_64Hz;
                            	 _Turnoff_INT_64Hz: 
0000CB54 48 F1              	    irq off
0000CB55 11 93 2D 70        	    r1 = [P_INT_CTRL_NEW]
0000CB57 09 B3 FD FF        		r1 &= 0xfffd;
0000CB59 19 D3 2D 70        		[P_INT_CTRL_NEW] = r1;
0000CB5B 40 F0 33 CB        	    call ClearWatchDog
0000CB5D 49 F1              	    irq on
0000CB5E 90 9A              	     retf;     
                            	.public T_SACM_S480_SpeechTable;
                            	T_SACM_S480_SpeechTable: 
0000CB5F 4E 83              	.dw _RES_1_48K_SA //0  检测 
0000CB60 52 83              	.dw _RES_2_48K_SA //1 完毕
0000CB61 56 83              	.dw _RES_3_48K_SA //2 模式
0000CB62 5A 83              	.dw _RES_4_48K_SA //3 没通过
0000CB63 5E 83              	.dw _RES_5_48K_SA //4  成功
0000CB64 62 83              	.dw _RES_6_48K_SA //5  LCD
0000CB65 66 83              	.dw _RES_7_48K_SA //6  SLEEP
0000CB66 6A 83              	.dw _RES_8_48K_SA //7  8*8点阵
0000CB67 6E 83              	.dw _RES_9_48K_SA //8  SIO
0000CB68 72 83              	.dw _RES_10_48K_SA //9  4*4键盘
0000CB69 76 83              	.dw _RES_11_48K_SA //10 6位LED检测
0000CB6A 7A 83              	.dw _RES_12_48K_SA //11 1*8案键
0000CB6B 7E 83              	.dw _RES_13_48K_SA //12 
0000CB6C 82 83              	.dw _RES_14_48K_SA //13  发光二极管
0000CB6D 86 83              	.dw _RES_15_48K_SA //14  io
0000CB6E 8A 83              	.dw _RES_01_48K_SA //15  欢迎进入自检模式  
0000CB6F 8E 83              	.dw _RES_16_48K_SA //16  ok
0000CB70 92 83              	.dw _RES_08_48K_SA //17  uart
                            	//****************************************************************
                            	// Function: Fast Interrupt Service routine Area                     
                            	//      Service for     (1)PWM FIQ
                            	//                      (2)Timer A FIQ
                            	//                      (3)Timer B FIQ
                            	//      User's FIQ must hook on here                            
                            	//  _FIQ:                            // Fast interrupt entrence
                            	//  _IRQ1:                           // interrupt entrence
                            	//  _IRQ2:                           // interrupt entrence
                            	//  _IRQ3:                           // interrupt entrence
                            	//  _IRQ4:                           // interrupt entrence
                            	//  _IRQ5:                           // interrupt entrence
                            	//  _IRQ6:                           // interrupt entrence     
                            	//  _IRQ7:                           // interrupt entrence
                            	//****************************************************************
                            	.public _BREAK 
                            	.public _FIQ 
                            	.public _IRQ0 
                            	.public _IRQ1
                            	
                            	.public _IRQ2 
                            	//.public _IRQ3 
                            	.public _IRQ4 
                            	.public _IRQ5 
                            	.public _IRQ6 
                            	.public _IRQ7 
                            	
                            	.include hardware.inc               // include hardware information
                     <      	//========================================================================================
                     <      	// Progarm: The file be included by modules
                     <      	// Arranged by: Andy Hsu
                     <      	// Date: 	2000/06/23: first version
                     <      	//		2000/07/24: modified
                     <      	//		2000/10/20: modified for version 52A
                     <      	//========================================================================================
                     <      	//////////////////////////////////////////////////////////////////
                     <      	// Definitions for I/O Port
                     <      	//////////////////////////////////////////////////////////////////
                     <      	.DEFINE	P_IOA_Data   		0x7000;        // Write Data into data register and read from IOA pad
                     <      	.DEFINE P_IOA_Buffer        0x7001;        // Write Data into buffer register and read from buffer register
                     <      	.DEFINE P_IOA_Dir           0x7002;        // Direction vector for IOA
                     <      	.DEFINE P_IOA_Attrib        0x7003;        // Attribute vector for IOA
                     <      	.DEFINE P_IOA_Latch         0x7004;        // Latch PortA data for key change wake-up
                     <      	
                     <      	.DEFINE P_IOB_Data         	0x7005;        // Write Data into the data register and read from IOB pad
                     <      	.DEFINE P_IOB_Buffer        0x7006;        // Write Data into buffer register and read from buffer register
                     <      	.DEFINE P_IOB_Dir           0x7007;        // Direction vector for IOB
                     <      	.DEFINE P_IOB_Attrib        0x7008;        // Attribute vector for IOB
                     <      	
                     <      	.DEFINE P_FeedBack          0x7009;        // Clock form external R,C
                     <      	.DEFINE P_TimerA_Data       0x700A;        // Data port for TimerA 
                     <      	.DEFINE P_TimerA_Ctrl       0x700B;        // Control Port for TimerA
                     <      	.DEFINE P_TimerB_Data       0x700C;        // Data port for TimerB
                     <      	.DEFINE P_TimerB_Ctrl       0x700D;        // Control Port for TimerB
                     <      	.DEFINE P_TimeBase_Setup    0x700E;        // TimerBase Freq. Set
                     <      	.DEFINE P_TimeBase_Clear	0x700F;		   // Reset Timerbase counter
                     <      	.DEFINE P_INT_Ctrl          0x7010;        // Control port for interrupt source
                     <      	.DEFINE P_INT_Clear         0x7011;        // Clear interrupt source
                     <      	.DEFINE P_Watchdog_Clear    0x7012;        // Watchdog Reset
                     <      	.DEFINE P_SystemClock       0x7013;        // Change system clock frequency(include go to standby mode)
                     <      	
                     <      	//... PA6442 Old version (for EC-02) ...........
                     <      	//.DEFINE P_ADDA               0x7014;        //10-bit DA(W) AD(R)
                     <      	//.DEFINE P_DAC1               0x7014;        //
                     <      	//.DEFINE P_AD_Ctrl            0x7015;        //AD/DA control
                     <      	//.DEFINE P_AD_Status          0x7015;        //AD status
                     <      	//.DEFINE P_DAC2               0x7016;        //DAC channel 2
                     <      	//.DEFINE P_PWM                0x7016;        //PWM output
                     <      	//.DEFINE P_DA_Ctrl            0x7017;        //DAC latch control
                     <      	
                     <      	//... PA6442 New version MC52A (For EC-03)....
                     <      	.DEFINE P_ADC 	        	0x7014;        	// Data Port for AD
                     <      	.DEFINE P_ADC_Ctrl          0x7015;        	// Control Port for AD control
                     <      	.DEFINE P_ADC_Status        0x7015;        	// AD Port Status
                     <      	.DEFINE P_DAC2              0x7016;        	// Data Port for DAC2
                     <      	.DEFINE P_PWM               0x7016;        	// Data Port for PWM
                     <      	.DEFINE P_DAC1	        	0x7017;        	// Data Port for DAC1
                     <      	.DEFINE P_DAC_Ctrl			0x702A;			// Control Port for two DAC and audio output mode
                     <      	//............................................
                     <      	
                     <      	.DEFINE P_IR_Ctrl			0x7018;			// Control Port for IR
                     <      	.DEFINE P_LVD_Ctrl          0x7019;        	// Control Port for LVD
                     <      	
                     <      	.DEFINE P_SIO_Addr_Low		0x701B;			// Address Port low
                     <      	.DEFINE P_SIO_Addr_Mid		0x701C;			// Address Port middle
                     <      	.DEFINE P_SIO_Addr_High	 	0x701D;			// Address Port high
                     <      	.DEFINE P_SIO_Ctrl			0x701E;			// Control Port
                     <      	.DEFINE P_SIO_Start			0x701F;			// Start port for serial interface
                     <      	.DEFINE P_SIO_Stop			0x7020;			// Stop port for serial interface
                     <      	.DEFINE P_SIO_Data			0x701A;	
                     <      	.DEFINE P_UART_Command1		 0x7021;		// Command1 Port for UART
                     <      	.DEFINE P_UART_Command2		 0x7022;		// Command2 Port for UART
                     <      	.DEFINE P_UART_Data			 0x7023; 		// Data Port for UART
                     <      	.DEFINE	P_UART_BaudScalarLow 0x7024;		// Set Baud Rate scalar low
                     <      	.DEFINE	P_UART_BaudScalarHigh 0x7025;		// Set Baud Rate scalar high
                     <      	
                     <      	
                     <      	//... Definitions for P_INT_Ctrl ..............
                     <      	.DEFINE C_IRQ6_TMB2             0x0001;        	// Timer B IRQ6
                     <      	.DEFINE C_IRQ6_TMB1             0x0002;        	// Timer A IRQ6
                     <      	.DEFINE C_IRQ5_2Hz              0x0004;        	// 2Hz IRQ5
                     <      	.DEFINE C_IRQ5_4Hz              0x0008;        	// 4Hz IRQ5
                     <      	.DEFINE C_IRQ4_1KHz             0x0010;        	// 1024Hz IRQ4
                     <      	.DEFINE C_IRQ4_2KHz             0x0020;        	// 2048Hz IRQ4
                     <      	.DEFINE C_IRQ4_4KHz             0x0040;        	// 4096Hz IRQ4
                     <      	.DEFINE C_IRQ3_KEY              0x0080;        	// Key Change IRQ3
                     <      	.DEFINE C_IRQ3_EXT1             0x0100;        	// Ext1 IRQ3
                     <      	.DEFINE C_IRQ3_EXT2             0x0200;        	// Ext2 IRQ3
                     <      	.DEFINE C_IRQ2_TMB              0x0400;        	// Timer B IRQ2
                     <      	.DEFINE C_FIQ_TMB               0x0800;        	// Timer B FIQ
                     <      	.DEFINE C_IRQ1_TMA              0x1000;        	// Timer A IRQ1
                     <      	.DEFINE C_FIQ_TMA               0x2000;        	// Timer A FIQ
                     <      	.DEFINE C_IRQ0_PWM              0x4000;        	// PWM IRQ0
                     <      	.DEFINE C_FIQ_PWM               0x8000;        	// PWM FIQ
                     <      	
                     <      	// Definitions for P_TimerA/B_Ctrl ............                               
                     <      	.DEFINE	C_Fosc_2				0x0000;			// 
                     <      	.DEFINE	C_Fosc_256		    	0x0001;			//
                     <      	.DEFINE	C_32768Hz				0x0002;			//
                     <      	.DEFINE	C_8192Hz				0x0003;			//
                     <      	.DEFINE	C_4096Hz				0x0004;			//
                     <      	.DEFINE	C_A1					0x0005;			//
                     <      	.DEFINE C_A0					0x0006;			//
                     <      	.DEFINE C_Ext1					0x0007;			//
                     <      	
                     <      	.DEFINE	C_2048Hz				0x0000;			//
                     <      	.DEFINE	C_1024Hz				0x0008;			//
                     <      	.DEFINE	C_256Hz					0x0010;			//
                     <      	.DEFINE	C_TMB1Hz				0x0018;			//
                     <      	.DEFINE	C_4Hz					0x0020;			//
                     <      	.DEFINE	C_2Hz					0x0028;			//
                     <      	.DEFINE	C_B1					0x0030;			//
                     <      	.DEFINE	C_Ext2					0x0038;			//
                     <      	
                     <      	.DEFINE	C_Off					0x0000;			//
                     <      	.DEFINE C_D1					0x0040;			//
                     <      	.DEFINE C_D2					0x0080;			//
                     <      	.DEFINE C_D3					0x00C0;			//
                     <      	.DEFINE C_D4					0x0100;			//
                     <      	.DEFINE C_D5					0x0140;			//
                     <      	.DEFINE C_D6					0x0180;			//
                     <      	.DEFINE C_D7					0x01C0;			//
                     <      	.DEFINE C_D8					0x0200;			//
                     <      	.DEFINE C_D9					0x0240;			//
                     <      	.DEFINE C_D10					0x0280;			//
                     <      	.DEFINE C_D11					0x02C0;			//
                     <      	.DEFINE C_D12					0x0300;			//
                     <      	.DEFINE C_D13					0x0340;			//
                     <      	.DEFINE C_D14					0x0380;			//
                     <      	.DEFINE C_TA_Div_2				0x03C0;			// Timer A
                     <      	.DEFINE C_TB_Div_2				0x03C0;			// Timer B
                     <      	
                     <      	//... Definition for P_SystemClock ............
                     <      	.DEFINE C_Fosc					0x0000;			// b3..b0
                     <      	.DEFINE C_Fosc_Div_2			0x0001;			//
                     <      	.DEFINE C_Fosc_Div_4			0x0002;			//
                     <      	.DEFINE C_Fosc_Div_8			0x0003;			// (default)
                     <      	.DEFINE C_Fosc_Div_16			0x0004;			//
                     <      	.DEFINE C_Fosc_Div_32			0x0005;			//
                     <      	.DEFINE C_Fosc_Div_64			0x0006;			//
                     <      	.DEFINE C_Sleep					0x0007;		 	//
                     <      	
                     <      	.DEFINE	C_32K_Work				0x0000;			// b4
                     <      	.DEFINE C_32K_Off				0x0000;			// 
                     <      	.DEFINE C_StrongMode			0x0000;			// b5
                     <      	.DEFINE C_AutoMode				0x0000;			//
                     <      	
                     <      	//... Define for P_AD_Ctrl ....................
                     <      	.DEFINE	C_AD					0x0001;			//
                     <      	.DEFINE C_DA					0x0000;			//
                     <      	.DEFINE C_MIC					0x0000;			//
                     <      	.DEFINE C_LINE					0x0002;			//
                     <      	
                     <      	//... Define for P_DA_Ctrl ....................
                     <      	.DEFINE C_PushPull				0x0000;			// b0, (default) 
                     <      	.DEFINE C_DoubleEnd				0x0001;			// b0
                     <      	.DEFINE	C_DAC_Mode				0x0000;			// b1, (default)
                     <      	.DEFINE C_PWM_Mode				0x0002;			// b1
                     <      	
                     <      	.DEFINE	C_D1_Direct				0x0000;			// DAC1 latch
                     <      	.DEFINE C_D1_LatchA				0x0008;			// 
                     <      	.DEFINE C_D1_LatchB				0x0010;			//
                     <      	.DEFINE C_D1_LatchAB			0x0018;			//
                     <      	
                     <      	.DEFINE	C_D2_Direct				0x0000;			// DAC2 latch
                     <      	.DEFINE C_D2_LatchA				0x0020;			// 
                     <      	.DEFINE C_D2_LatchB				0x0040;			//
                     <      	.DEFINE C_D2_LatchAB			0x00C0;			//
                     <      	
                     <      	//... Define for P_LVD_Ctrl ...................
                     <      	.DEFINE C_LVD24V				0x0000;			// LVD = 2.4V 
                     <      	.DEFINE C_LVD28V				0x0001;			// LVD = 2.8V
                     <      	.DEFINE C_LVD32V				0x0002;			// LVD = 3.2V
                     <      	.DEFINE C_LVD36V				0x0003;			// LVD = 3.6V
                     <      	
                     <      	
                     <      	.EXTERNAL	F_SP_Read_INT_Status;			// for further use
                     <      	.EXTERNAL 	F_SP_Write_INT_Status;			// for further use
                     <      	.EXTERNAL  	F_SP_Set_INT_Vector;			// for further use
                     <      	.EXTERNAL	F_SP_Clear_INT_Vector;			// for further use
                     <      	
                     <      	.EXTERNAL	F_SP_Send_Out;					//
                     <      	.EXTERNAL	F_SP_Send_DAC1;					//
                     <      	.EXTERNAL	F_SP_Send_DAC2;					//
                     <      	.EXTERNAL	F_SP_Send_Two_DAC;				//
                     <      	.EXTERNAL	F_SP_Init_HW;					//
                     <      	
                     <      	.EXTERNAL	R_InterruptStatus;
                     <      	
                     <      	
                     <      	.EXTERNAL 	F_SP_RampUpDAC1;
                     <      	.EXTERNAL 	F_SP_RampDnDAC1;
                     <      	.EXTERNAL 	F_SP_RampUpDAC2;
                     <      	.EXTERNAL  	F_SP_RampDnDAC2;
                     <      	
                     <      	.EXTERNAL 	F_SP_InitQueue;
                     <      	.EXTERNAL 	F_SP_ReadQueue;
                     <      	.EXTERNAL 	F_SP_WriteQueue;
                     <      	.EXTERNAL 	F_SP_TestQueue;
                     <      	
                     <      	
                     <      	
                     <      	.EXTERNAL	F_SP_Get_ADC
                     <      	
                     <      	.EXTERNAL 	F_SP_Set_P_TimerA_Ctrl
                     <      	.EXTERNAL 	F_SP_Set_P_TimerA_Data
                     <      	.EXTERNAL 	F_SP_Set_P_TimerB_Ctrl
                     <      	.EXTERNAL 	F_SP_Set_P_TimerB_Data
                     <      	.EXTERNAL 	F_SP_Set_P_INT_Ctrl
                     <      	.EXTERNAL 	F_SP_Set_P_INT_Clear
                     <      	.EXTERNAL 	F_SP_Set_P_SystemClock
                     <      	.EXTERNAL 	F_SP_Set_P_DAC_Ctrl
                     <      	.EXTERNAL 	F_SP_Set_P_ADC_Ctrl
                     <      	
                     <      		
                     <      	
                     <      	//--------------------------------------------
                     <      	SACM_MACRO1: 	.MACRO
                     <      		
                     <      		.ENDM
                     <      	
                     <      	SACM_MACRO2:	.MACRO
                     <      		
                     <      		.ENDM
                     <      	
                     <      	
                     <      	
                     <      	
                     <      	//.define PC_Play_Enable_A2000		1    	// Enable the PC-Play function for SACM-A2000 module
                     <      	//.define PC_Play_Enable_S480		1    	// Enable the PC-Play function for SACM-S480 module
                     <      	//.define PC_Play_Enable_S240		1    	// Enable the PC-Play function for SACM-S240 module    
                     <      	//.define PC_Play_Enable_MS01		1    	// Enable the PC-Play function for SACM-MS01 module
                     <      	
                     <      	
                     <      	
                     <      	//========================================================================================        
                     <      	// End of hardware.inc
                     <      	//========================================================================================
                            	.include dvr.inc 
                     <      	//////////////////////////////////////////////////////////////////////////////////////////
                     <      	// Progarm: SACM-DVR API external definition form sacmVxx.lib
                     <      	// Writen by: Andy
                     <      	// 	Date: 2000/06/20
                     <      	// 	Date: 2001/10/11 	Add Manual mode definition
                     <      	//////////////////////////////////////////////////////////////////////////////////////////
                     <      	
                     <      	.EXTERNAL F_SACM_DVR_Initial
                     <      	.EXTERNAL F_SACM_DVR_ServiceLoop
                     <      	.EXTERNAL F_SACM_DVR_Record
                     <      	.EXTERNAL F_SACM_DVR_Play
                     <      	.EXTERNAL F_SACM_DVR_Stop
                     <      	.EXTERNAL F_SACM_DVR_Status
                     <      	
                     <      	.EXTERNAL F_SACM_DVR_InitEncoder						// For Manual Mode
                     <      	.EXTERNAL F_SACM_DVR_InitDecoder						// For Manual Mode
                     <      	.EXTERNAL F_SACM_DVR_Encoder							// For Manual Mode
                     <      	.EXTERNAL F_SACM_DVR_Decoder							// For Manual Mode
                     <      	
                     <      	.EXTERNAL F_SACM_DVR_InitQueue							// For Manual Mode
                     <      	.EXTERNAL F_SACM_DVR_FetchQueue							// For Manual Mode
                     <      	.EXTERNAL F_SACM_DVR_FillQueue							// For Manual Mode
                     <      	.EXTERNAL F_SACM_DVR_TestQueue							// For Manual Mode
                     <      	
                     <      	.EXTERNAL F_FIQ_Service_SACM_DVR						// Interrupt service Routine(Rec/Play)
                     <      	
                     <      	
                     <      	//========================================================================================        
                     <      	// End of dvr.inc
                     <      	//========================================================================================
                            	
0000824C                    	.TEXT
                            	/////////////////////////////////////////////////////////////////////////////////////////
                            	// Function: Fast Interrupt Service routine Area                     
                            	////////////////////////////////////////////////////////////////////////////////////////
                            	
                            	//_FIQ:                  
                            	//		push r1,r5 to [sp]                
                            	 //       call    F_FIQ_Service_SACM_DVR  // for playback
                            	  //      r1 = C_FIQ_TMA
                            	  //      [P_INT_Clear] = r1
                            	  //      pop r1,r5 from [sp] 
                            	  //      reti    
                            	  _FIQ:
0000824C A8 DA              		PUSH	r1,r5 to [sp];
0000824D 09 93 00 20        		r1=0x2000;
0000824F 11 C3 10 70        		test r1,[P_INT_Ctrl];
00008251 0B 4E              		jnz L_FIQ_TimerA;
00008252 09 93 00 08        		r1=0x0800;
00008254 11 C3 10 70        		test r1,[P_INT_Ctrl];
00008256 0C 4E              		jnz L_FIQ_TimerB;
                            	L_FIQ_PWM:
00008257 09 93 00 80        		r1=C_FIQ_PWM;
00008259 19 D3 11 70        		[P_INT_Clear]=r1;
0000825B A8 90              		POP R1,R5 from[sp];
0000825C 98 9A              		reti;
                            	L_FIQ_TimerA:
0000825D 19 D3 11 70        		[P_INT_Clear]=r1;
                            	   // call    F_FIQ_Service_SACM_DVR; //语音播放中断
0000825F 40 F0 BF BF        		call F_FIQ_Service_SACM_S480;
00008261 A8 90              		pop r1,r5 from [sp];
00008262 98 9A              		reti;
                            	L_FIQ_TimerB:
00008263 19 D3 11 70        		[P_INT_Clear]=r1;
00008265 A8 90              		pop r1,r5 from [sp];
00008266 98 9A              		reti;         
                            	/////////////////////////////////////////////////////////////////////////////////////////
                            	// Function: Interrupt Service routine Area                     
                            	//      Service for     IRQ1 - IRQ7
                            	//      User's IRQ must hook on here                                 
                            	/////////////////////////////////////////////////////////////////////////////////////////        
                            	_BREAK:        
00008267 A0 D8              	        push r1,r4 to [sp] 
00008268 A0 90              	        pop r1,r4 from [sp] 
00008269 98 9A              	        reti          
                            	// ---------------------------------------------------------------------------
                            	_IRQ0:        
0000826A A0 D8              	        push r1,r4 to [sp] 
0000826B A0 90              	        pop r1,r4 from [sp] 
0000826C 98 9A              	        reti          
                            	// ---------------------------------------------------------------------------
                            	_IRQ1:        
0000826D 88 D2              	   		push R1 to [SP]
0000826E 88 90              			pop R1 from [SP] 
0000826F 98 9A              			reti 	    
                            	          
                            	        
                            	  
                            	  
                            	_IRQ2:        
00008270 A0 D8              	        push r1,r4 to [sp] 
00008271 A0 90              	        pop r1,r4 from [sp] 
00008272 98 9A              	        reti          
                            	// ---------------------------------------------------------------------------
                            	//_IRQ3:        
                            	//        push r1,r4 to [sp] 
                            	        
                            	//        pop r1,r4 from [sp] 
                            	 //       reti          
                            	// ---------------------------------------------------------------------------
                            	_IRQ4:       
00008273 A8 DA              		PUSH R1,R5 TO [sp]		//压栈保护；
00008274 50 92              		R1 = 0x0010;
00008275 11 C3 10 70        		test R1,[P_INT_CTRL];	//比较是否为1KHz的中断源；
00008277 2D 4E              		JNZ L_irq4_1k;			//是，则转至对应程序段；
00008278 60 92              		R1 = 0x0020;				
00008279 11 C3 10 70        		TEST R1,[P_INT_CTRL]    //否，则比较是否为2KHz的中断源；	 
0000827B 24 4E              		JNZ L_irq4_2k;			//是，则转至对应程序段；
                            	L_irq4_4k:                  //否，则进入4KHz程序段；
0000827C 11 93 05 70        		   r1=[P_IOB_DATA];
0000827E 60 94              	       r2=0000000000100000b
0000827F 01 B5              	       r2=r2&R1
00008280 BA 95              	       r2=r2 ror 4
00008281 AA 95              	       r2=r2 ror 2
00008282 11 93 F3 02        	       r1=[One_Flag]
00008284 81 93              	       r1=r1 rol 1
00008285 19 D3 F3 02        	       [One_Flag]=r1
00008287 09 B3 00 FF        	        r1=r1&0xff00 
00008289 40 F0 33 CB        	       call ClearWatchDog
0000828B 09 43 00 AA        	       cmp r1,0xaa00
0000828D 06 5E              	       je _step0
0000828E 09 93 40 00        	        R1 = 0x0040
00008290 19 D3 11 70        			[P_INT_Clear] = R1 
00008292 A8 90              			POP R1,R5 FROM [sp]
00008293 98 9A              			reti 
                            	 _step0:
00008294 40 F0 33 CB        	        call ClearWatchDog
00008296 11 93 F6 02        	        r1=[first]
00008298 40 42              	        cmp r1,0
00008299 10 5E              	        je loop1
0000829A 41 42              	         cmp r1,1
0000829B 1F 5E              	        je loop2
0000829C 42 42              	         cmp r1,2
0000829D 30 5E              	        je loop3
0000829E 43 42              	        cmp r1,3
0000829F 3F 5E              	        je loop4
                            	L_irq4_2k:
000082A0 60 92              	     R1 = 0x0020;	     
000082A1 19 D3 11 70        		[P_INT_Clear] = R1;
000082A3 A8 90              	    POP R1,R5 FROM [sp]
000082A4 98 9A              	    RETI	
                            	L_irq4_1k:
                            	    
000082A5 50 92              	    R1 = 0x0010;	     
000082A6 19 D3 11 70        		[P_INT_Clear] = R1;
000082A8 A8 90              	    POP R1,R5 FROM [sp]
000082A9 98 9A              	    RETI   
                            	        
                            	  loop1:
                            	       
000082AA 11 93 F3 02        	       r1=[One_Flag]
000082AC 19 D3 EF 02        	        [Originally_Data]=r1
000082AE 09 93 FF FF        	        r1=0xffff
000082B0 19 D3 F3 02        	         [One_Flag]=r1
000082B2 41 92              	         r1=1
000082B3 19 D3 F6 02        	        [first]=r1
000082B5 09 93 40 00        	        R1 = 0x0040
000082B7 19 D3 11 70        			[P_INT_Clear] = R1 
000082B9 A8 90              			POP R1,R5 FROM [sp]
000082BA 98 9A              			reti 
                            	   loop2:
000082BB 40 F0 33 CB        	    call ClearWatchDog
000082BD 11 93 F3 02        			r1=[One_Flag]
000082BF 19 D3 F0 02        	        [Originally_Data1]=r1
000082C1 09 93 FF FF        	        r1=0xffff
000082C3 19 D3 F3 02        	         [One_Flag]=r1
000082C5 42 92              	         r1=2
000082C6 19 D3 F6 02        	         [first]=r1
                            	   
000082C8 09 93 40 00        	        R1 = 0x0040
000082CA 19 D3 11 70        			[P_INT_Clear] = R1 
000082CC A8 90              			POP R1,R5 FROM [sp]
000082CD 98 9A              			reti 
                            		loop3:
                            	 
000082CE 11 93 F3 02        			r1=[One_Flag]
000082D0 19 D3 F1 02        	        [Originally_Data2]=r1
000082D2 09 93 FF FF        	        r1=0xffff
000082D4 19 D3 F3 02        	         [One_Flag]=r1
000082D6 43 92              	         r1=3
000082D7 19 D3 F6 02        	         [first]=r1
000082D9 09 93 40 00        	          R1 = 0x0040
000082DB 19 D3 11 70        			[P_INT_Clear] = R1 
000082DD A8 90              			POP R1,R5 FROM [sp]
000082DE 98 9A              			reti 
                            		loop4:
000082DF 40 F0 33 CB        	 call ClearWatchDog
000082E1 11 93 F3 02        			r1=[One_Flag]
000082E3 19 D3 F2 02        	        [Originally_Data3]=r1
000082E5 11 93 EF 02        	        r1=[Originally_Data]
000082E7 12 95 F0 02        	        r2=[Originally_Data1]
                            	       
000082E9 02 43              	        cmp r1,r2
000082EA 0D 5E              	        je cmp2
                            	   
000082EB 09 93 FF FF        	        r1=0xffff
000082ED 19 D3 F3 02        	         [One_Flag]=r1
000082EF 40 92              	         r1=0
000082F0 19 D3 F6 02        	         [first]=r1
000082F2 09 93 40 00        	          R1 = 0x0040
000082F4 19 D3 11 70        			[P_INT_Clear] = R1 
000082F6 A8 90              			POP R1,R5 FROM [sp]
000082F7 98 9A              			reti 
                            	 cmp2:
000082F8 40 F0 33 CB        	  call ClearWatchDog
000082FA 11 93 F0 02        	      r1=[Originally_Data1]
000082FC 12 95 F1 02        	        r2=[Originally_Data2]
000082FE 02 43              	       cmp r1,r2
000082FF 0D 5E              	         je cmp3
00008300 09 93 FF FF        	         r1=0xffff
00008302 19 D3 F3 02        	         [One_Flag]=r1
00008304 40 92              	         r1=0
00008305 19 D3 F6 02        	         [first]=r1
00008307 09 93 40 00        	          R1 = 0x0040
00008309 19 D3 11 70        			[P_INT_Clear] = R1 
0000830B A8 90              			POP R1,R5 FROM [sp]
0000830C 98 9A              			reti 
                            	 
                            	 cmp3: 
0000830D 40 F0 33 CB        	  call ClearWatchDog
0000830F 11 93 F1 02        	      r1=[Originally_Data2]
00008311 12 95 F2 02        	        r2=[Originally_Data3]
00008313 02 43              	       cmp r1,r2
00008314 0D 5E              	         je  lasttt
00008315 09 93 FF FF        	        r1=0xffff
00008317 19 D3 F3 02        	         [One_Flag]=r1
00008319 40 92              	         r1=0
0000831A 19 D3 F6 02        	         [first]=r1
0000831C 09 93 40 00        	          R1 = 0x0040
0000831E 19 D3 11 70        			[P_INT_Clear] = R1 
00008320 A8 90              			POP R1,R5 FROM [sp]
00008321 98 9A              			reti 
                            	lasttt:
00008322 40 F0 33 CB        	 call ClearWatchDog
00008324 11 93 F1 02        	    r1=[Originally_Data2]
00008326 19 D3 F7 02        	    [_Last]=r1
00008328 09 93 40 00        	    R1 = 0x0040;	     
0000832A 19 D3 11 70        		[P_INT_Clear] = R1;
0000832C A8 90              	    POP R1,R5 FROM [sp]
0000832D 98 9A              	    RETI;    	
                            	        
                            	// ---------------------------------------------------------------------------
                            	_IRQ5:                        //定时3秒的中断程序
0000832E A0 D8              		push r1,r4 to [sp];
                            	
0000832F 48 92              		r1 =0x0008;						 
00008330 11 C3 10 70        		test r1,[P_INT_Ctrl];				
00008332 05 4E              		jnz	L_4Hz;				   // Timer A FIQ entrence 	
                            	
00008333 44 92              		r1 = 0x0004;
00008334 19 D3 11 70        	    [P_INT_Clear] = r1;        //清中断
                            	    
                            	   
                            	    
                            	  
00008336 A0 90              	    pop r1,r4 from [sp];
00008337 98 9A              	    reti; 
                            	
                            	
                            	
                            	L_4Hz:  
                            	     
00008338 48 92              	      R1 =  0x0008
00008339 19 D3 11 70        		  [P_INT_Clear] = R1 	
                            	 	  
0000833B A0 90              	    pop r1,r4 from [sp];
0000833C 98 9A              	    reti; 
                            	
                            	// ---------------------------------------------------------------------------
                            	     
                            	_IRQ6:        
                            		
0000833D A0 D8              			push r1,r4 to [sp];
0000833E 41 92              			r1=0x0001;
0000833F 11 C3 10 70        			test r1,[P_INT_Ctrl];
00008341 05 4E              			jnz  _IRQ6_TMB2;
00008342 42 92              			r1=0x0002;
00008343 19 D3 11 70        			[P_INT_Clear]=r1;
                            	
00008345 A0 90              			pop r1,r4 from [sp];
00008346 98 9A              	        reti;    
                            	             
                            	_IRQ6_TMB2:
00008347 19 D3 11 70        			[P_INT_Clear]=r1;
                            		
00008349 A0 90              			pop r1,r4 from [sp];
0000834A 98 9A              	        reti;  
                            	// ---------------------------------------------------------------------------
                            	_IRQ7:        
0000834B A0 D8              	        push r1,r4 to [sp] 
0000834C A0 90              	        pop r1,r4 from [sp] 
0000834D 98 9A              	        reti          
                            	// ---------------------------------------------------------------------------
                            	        
0 error(s), 0 warning(s).

