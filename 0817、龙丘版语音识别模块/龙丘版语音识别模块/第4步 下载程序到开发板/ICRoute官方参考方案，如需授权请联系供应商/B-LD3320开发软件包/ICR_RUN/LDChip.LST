C51 COMPILER V7.10   LDCHIP                                                                09/17/2011 14:04:12 PAGE 1   


C51 COMPILER V7.10, COMPILATION OF MODULE LDCHIP
OBJECT MODULE PLACED IN LDChip.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE LDChip.c OPTIMIZE(SIZE) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /************************************************************************************/
   2          //      版权所有：Copyright (c) 2005 - 2010 ICRoute INC.
   3          /************************************************************************************/
   4          
   5          
   6          
   7          #include "STC10F08XE.H"
   8          #include "LDChip.h"
   9          #include "Reg_RW.h"
  10          #include "FlashDef.h"
  11          #include "AsrItem.h"
  12          #include "SubFuncs.h"
  13          
  14          sbit RSTB=P3^3;
  15          sbit CSB=P2^6;
  16          
  17          uint32 nMp3StartPos=0;
  18          uint32 nMp3Size=0;
  19          uint32 nMp3Pos=0;
  20          uint32 nCurMp3Pos=0;
  21          uint8  idata nLD_Mode = LD_MODE_IDLE;           //      用来记录当前是在进行ASR识别还是在播放MP3
  22          uint8 bMp3Play=0;                                                       //      用来记录播放MP3的状态
  23          uint8 idata ucRegVal;
  24          uint8 idata ucHighInt;
  25          uint8 idata ucLowInt;
  26          uint8 idata ucStatus;
  27          uint8 idata ucSPVol=15; // MAX=15 MIN=0         //      Speaker喇叭输出的音量
  28          
  29          extern uint8 idata nAsrStatus;
  30          void ProcessInt0();
  31          
  32          /************************************************************************************/
  33          //      这个C文件里面包含的函数，相当于LD3320的驱动，以C语言源代码的形式提供
  34          //      开发者在没有调试通过之前，一定不要修改这里面的函数
  35          //      
  36          //      LD_ReloadMp3Data()函数由于牵涉到主控MCU向外部存储芯片读取MP3数据的操作
  37          //      所以开发者应该根据自己的实际使用的存储芯片，去修改这个函数
  38          //      但是要保证对于LD3320芯片的操作不改变
  39          //
  40          //      LD_GetResult()函数目前只简单取了第一候选结果作为识别结果
  41          //      开发者应该根据自己产品设计，决定是否要读取其他的识别候选结果
  42          /************************************************************************************/
  43          
  44          
  45          
  46          void LD_reset()
  47          {
  48   1              RSTB=1;
  49   1              delay(1);
  50   1              RSTB=0;
  51   1              delay(1);
  52   1              RSTB=1;
  53   1      
  54   1              delay(1);
  55   1              CSB=0;
C51 COMPILER V7.10   LDCHIP                                                                09/17/2011 14:04:12 PAGE 2   

  56   1              delay(1);
  57   1              CSB=1;
  58   1              delay(1);
  59   1      }
  60          
  61          void LD_Init_Common()
  62          {
  63   1              bMp3Play = 0;
  64   1      
  65   1              LD_ReadReg(0x06);  
  66   1              LD_WriteReg(0x17, 0x35); 
  67   1              delay(10);
  68   1              LD_ReadReg(0x06);  
  69   1      
  70   1              LD_WriteReg(0x89, 0x03);  
  71   1              delay(5);
  72   1              LD_WriteReg(0xCF, 0x43);   
  73   1              delay(5);
  74   1              LD_WriteReg(0xCB, 0x02);
  75   1              
  76   1              /*PLL setting*/
  77   1              LD_WriteReg(0x11, LD_PLL_11);       
  78   1              if (nLD_Mode == LD_MODE_MP3)
  79   1              {
  80   2                      LD_WriteReg(0x1E, 0x00); 
  81   2                      LD_WriteReg(0x19, LD_PLL_MP3_19);   
  82   2                      LD_WriteReg(0x1B, LD_PLL_MP3_1B);   
  83   2                      LD_WriteReg(0x1D, LD_PLL_MP3_1D);
  84   2              }
  85   1              else
  86   1              {
  87   2                      LD_WriteReg(0x1E,0x00);
  88   2                      LD_WriteReg(0x19, LD_PLL_ASR_19); 
  89   2                      LD_WriteReg(0x1B, LD_PLL_ASR_1B);               
  90   2                  LD_WriteReg(0x1D, LD_PLL_ASR_1D);
  91   2              }
  92   1              delay(10);
  93   1              
  94   1              LD_WriteReg(0xCD, 0x04);
  95   1              LD_WriteReg(0x17, 0x4C); 
  96   1              delay(5);
  97   1              LD_WriteReg(0xB9, 0x00);
  98   1              LD_WriteReg(0xCF, 0x4F); 
  99   1              LD_WriteReg(0x6F, 0xFF); 
 100   1      }
 101          
 102          void LD_Init_MP3()
 103          {
 104   1              nLD_Mode = LD_MODE_MP3;
 105   1              LD_Init_Common();
 106   1      
 107   1              LD_WriteReg(0xBD,0x02);
 108   1              LD_WriteReg(0x17, 0x48);
 109   1              delay(10);
 110   1      
 111   1              LD_WriteReg(0x85, 0x52); 
 112   1              LD_WriteReg(0x8F, 0x00);  
 113   1              LD_WriteReg(0x81, 0x00);
 114   1              LD_WriteReg(0x83, 0x00);
 115   1              LD_WriteReg(0x8E, 0xff);
 116   1              LD_WriteReg(0x8D, 0xff);
 117   1          delay(1);
C51 COMPILER V7.10   LDCHIP                                                                09/17/2011 14:04:12 PAGE 3   

 118   1              LD_WriteReg(0x87, 0xff);
 119   1              LD_WriteReg(0x89, 0xff);
 120   1              delay(1);
 121   1              LD_WriteReg(0x22, 0x00);    
 122   1              LD_WriteReg(0x23, 0x00);
 123   1              LD_WriteReg(0x20, 0xef);    
 124   1              LD_WriteReg(0x21, 0x07);
 125   1              LD_WriteReg(0x24, 0x77);          
 126   1          LD_WriteReg(0x25, 0x03);
 127   1          LD_WriteReg(0x26, 0xbb);    
 128   1          LD_WriteReg(0x27, 0x01); 
 129   1      }
 130                  
 131          void LD_Init_ASR()
 132          {
 133   1              nLD_Mode=LD_MODE_ASR_RUN;
 134   1              LD_Init_Common();
 135   1      
 136   1              LD_WriteReg(0xBD, 0x00);
 137   1              LD_WriteReg(0x17, 0x48);
 138   1              delay( 10 );
 139   1      
 140   1              LD_WriteReg(0x3C, 0x80);    
 141   1              LD_WriteReg(0x3E, 0x07);
 142   1              LD_WriteReg(0x38, 0xff);    
 143   1              LD_WriteReg(0x3A, 0x07);
 144   1              
 145   1              LD_WriteReg(0x40, 0);          
 146   1              LD_WriteReg(0x42, 8);
 147   1              LD_WriteReg(0x44, 0);    
 148   1              LD_WriteReg(0x46, 8); 
 149   1              delay( 1 );
 150   1      }
 151          
 152          
 153          void ProcessInt0()
 154          {
 155   1              uint8 nAsrResCount=0;
 156   1      
 157   1              EX0=0;
 158   1              
 159   1              ucRegVal = LD_ReadReg(0x2B);
 160   1              if(nLD_Mode == LD_MODE_ASR_RUN)
 161   1              {
 162   2                      // 语音识别产生的中断
 163   2                      // （有声音输入，不论识别成功或失败都有中断）
 164   2                      LD_WriteReg(0x29,0) ;
 165   2                      LD_WriteReg(0x02,0) ;
 166   2                      if((ucRegVal & 0x10) &&
 167   2                              LD_ReadReg(0xb2)==0x21 && 
 168   2                              LD_ReadReg(0xbf)==0x35)
 169   2                      {
 170   3                              nAsrResCount = LD_ReadReg(0xba);
 171   3                              if(nAsrResCount>0 && nAsrResCount<=4) 
 172   3                              {
 173   4                                      nAsrStatus=LD_ASR_FOUNDOK;
 174   4                              }
 175   3                              else
 176   3                          {
 177   4                                      nAsrStatus=LD_ASR_FOUNDZERO;
 178   4                              }       
 179   3                      }
C51 COMPILER V7.10   LDCHIP                                                                09/17/2011 14:04:12 PAGE 4   

 180   2                      else
 181   2                      {
 182   3                              nAsrStatus=LD_ASR_FOUNDZERO;
 183   3                      }
 184   2                              
 185   2                      LD_WriteReg(0x2b, 0);
 186   2              LD_WriteReg(0x1C,0);
 187   2                      return;
 188   2              }
 189   1              
 190   1              // 声音播放产生的中断，有三种：
 191   1              // A. 声音数据已全部播放完。
 192   1              // B. 声音数据已发送完毕。
 193   1              // C. 声音数据暂时将要用完，需要放入新的数据。  
 194   1              ucHighInt = LD_ReadReg(0x29); 
 195   1              ucLowInt=LD_ReadReg(0x02); 
 196   1              LD_WriteReg(0x29,0) ;
 197   1              LD_WriteReg(0x02,0) ;
 198   1          if(LD_ReadReg(0xBA)&CAUSE_MP3_SONG_END)
 199   1          {
 200   2              // A. 声音数据已全部播放完。
 201   2      
 202   2                      LD_WriteReg(0x2B,  0);
 203   2              LD_WriteReg(0xBA, 0);   
 204   2                      LD_WriteReg(0xBC,0x0);  
 205   2                      bMp3Play=0;                                     // 声音数据全部播放完后，修改bMp3Play的变量
 206   2                      LD_WriteReg(0x08,1);
 207   2                      delay_2(5);
 208   2              LD_WriteReg(0x08,0);
 209   2                      LD_WriteReg(0x33, 0);
 210   2      
 211   2                      return ;
 212   2           }
 213   1      
 214   1               if(nMp3Pos>=nMp3Size)
 215   1              {
 216   2              // B. 声音数据已发送完毕。
 217   2      
 218   2                      LD_WriteReg(0xBC, 0x01);
 219   2                      LD_WriteReg(0x29, 0x10);
 220   2      //              bMp3Play=0;                             //      此时，只是主控MCU把所有MP3数据发送到LD3320芯片内，但是还没有把送入的数据全部播放完毕
 221   2                      EX0=1;
 222   2      
 223   2                      return; 
 224   2              }
 225   1      
 226   1              // C. 声音数据暂时将要用完，需要放入新的数据。  
 227   1      
 228   1              LD_ReloadMp3Data_2();
 229   1                      
 230   1              LD_WriteReg(0x29,ucHighInt); 
 231   1              LD_WriteReg(0x02,ucLowInt) ;
 232   1      
 233   1              delay_2(10);
 234   1              EX0=1;
 235   1      
 236   1      }
 237          
 238          
 239          
 240          
 241          void LD_play()
C51 COMPILER V7.10   LDCHIP                                                                09/17/2011 14:04:12 PAGE 5   

 242          {
 243   1              nMp3Pos=0;
 244   1              bMp3Play=1;
 245   1      
 246   1              if (nMp3Pos >=  nMp3Size)
 247   1                      return ; 
 248   1      
 249   1              LD_ReloadMp3Data();
 250   1      
 251   1          LD_WriteReg(0xBA, 0x00);
 252   1              LD_WriteReg(0x17, 0x48);
 253   1              LD_WriteReg(0x33, 0x01);
 254   1              LD_WriteReg(0x29, 0x04);
 255   1              
 256   1              LD_WriteReg(0x02, 0x01); 
 257   1              LD_WriteReg(0x85, 0x5A);
 258   1      
 259   1              EX0=1;
 260   1      
 261   1      }
 262          
 263          void LD_AdjustMIX2SPVolume(uint8 val)
 264          {
 265   1              ucSPVol = val;
 266   1              val = ((15-val)&0x0f) << 2;
 267   1              LD_WriteReg(0x8E, val | 0xc3); 
 268   1              LD_WriteReg(0x87, 0x78); 
 269   1      }
 270          
 271          void LD_ReloadMp3Data()
 272          {
 273   1              uint32 nCurMp3Pos;
 274   1              uint8 val;
 275   1              uint8 k;
 276   1      
 277   1              nCurMp3Pos = nMp3StartPos + nMp3Pos;
 278   1              FLASH_CS=1;
 279   1              FLASH_CLK=0;
 280   1              FLASH_CS=0;
 281   1      
 282   1               IO_Send_Byte(W25P_FastReadData);   
 283   1               IO_Send_Byte(((nCurMp3Pos & 0xFFFFFF) >> 16));  
 284   1               IO_Send_Byte(((nCurMp3Pos & 0xFFFF) >> 8));
 285   1               IO_Send_Byte(nCurMp3Pos & 0xFF);
 286   1               IO_Send_Byte(0xFF);
 287   1      
 288   1              ucStatus = LD_ReadReg(0x06);
 289   1              while ( !(ucStatus&MASK_FIFO_STATUS_AFULL) && (nMp3Pos<nMp3Size) )
 290   1              {
 291   2                      val=0;
 292   2                      for(k=0;k<8;k++)
 293   2                      {
 294   3                              FLASH_CLK=0;
 295   3                              val<<=1;
 296   3                              FLASH_CLK=1;
 297   3                              val|=FLASH_DO;
 298   3                      }
 299   2                      LD_WriteReg(0x01,val);
 300   2      
 301   2                      nMp3Pos++;
 302   2      
 303   2                      ucStatus = LD_ReadReg(0x06);
C51 COMPILER V7.10   LDCHIP                                                                09/17/2011 14:04:12 PAGE 6   

 304   2              }
 305   1              
 306   1              FLASH_CS=1;
 307   1              FLASH_CLK=0;
 308   1      
 309   1      }
 310          /*********************************************************************
 311          //为了消除编译时的 警告 *** WARNING L15: MULTIPLE CALL TO SEGMENT
 312          //把在中断函数中需要调用的函数重新复制并命名
 313          //消除警告 Warning L15，并且避免由于函数重入可能带来的隐藏Bug
 314          /*********************************************************************/
 315          
 316          void LD_ReloadMp3Data_2()
 317          {
 318   1              uint32 nCurMp3Pos;
 319   1              uint8 val;
 320   1              uint8 k;
 321   1      
 322   1              nCurMp3Pos = nMp3StartPos + nMp3Pos;
 323   1              FLASH_CS=1;
 324   1              FLASH_CLK=0;
 325   1              FLASH_CS=0;
 326   1      
 327   1               IO_Send_Byte(W25P_FastReadData);   
 328   1               IO_Send_Byte(((nCurMp3Pos & 0xFFFFFF) >> 16));  
 329   1               IO_Send_Byte(((nCurMp3Pos & 0xFFFF) >> 8));
 330   1               IO_Send_Byte(nCurMp3Pos & 0xFF);
 331   1               IO_Send_Byte(0xFF);
 332   1      
 333   1              ucStatus = LD_ReadReg(0x06);
 334   1              while ( !(ucStatus&MASK_FIFO_STATUS_AFULL) && (nMp3Pos<nMp3Size) )
 335   1              {
 336   2                      val=0;
 337   2                      for(k=0;k<8;k++)
 338   2                      {
 339   3                              FLASH_CLK=0;
 340   3                              val<<=1;
 341   3                              FLASH_CLK=1;
 342   3                              val|=FLASH_DO;
 343   3                      }
 344   2                      LD_WriteReg(0x01,val);
 345   2      
 346   2                      nMp3Pos++;
 347   2      
 348   2                      ucStatus = LD_ReadReg(0x06);
 349   2              }
 350   1              
 351   1              FLASH_CS=1;
 352   1              FLASH_CLK=0;
 353   1      
 354   1      }
 355          
 356          // Return 1: success.
 357          uint8 LD_Check_ASRBusyFlag_b2()
 358          {
 359   1              uint8 j;
 360   1              uint8 flag = 0;
 361   1              for (j=0; j<10; j++)
 362   1              {
 363   2                      if (LD_ReadReg(0xb2) == 0x21)
 364   2                      {
 365   3                              flag = 1;
C51 COMPILER V7.10   LDCHIP                                                                09/17/2011 14:04:12 PAGE 7   

 366   3                              break;
 367   3                      }
 368   2                      delay(10);              
 369   2              }
 370   1              return flag;
 371   1      }
 372          
 373          void LD_AsrStart()
 374          {
 375   1              LD_Init_ASR();
 376   1      }
 377          
 378          // Return 1: success.
 379          uint8 LD_AsrRun()
 380          {
 381   1              SendString("LD_AsrRun().");
 382   1              SendLineEnd();
 383   1      
 384   1              LD_WriteReg(0x35, MIC_VOL);
 385   1      //      LD_WriteReg(0xB3, 0x0D);        // 用户阅读 开发手册 理解B3寄存器的调整对于灵敏度和识别距离的影响
 386   1      
 387   1      
 388   1              LD_WriteReg(0x1C, 0x09);
 389   1              LD_WriteReg(0xBD, 0x20);
 390   1              LD_WriteReg(0x08, 0x01);
 391   1              delay( 1 );
 392   1              LD_WriteReg(0x08, 0x00);
 393   1              delay( 1 );
 394   1      
 395   1              if(LD_Check_ASRBusyFlag_b2() == 0)
 396   1              {
 397   2                      return 0;
 398   2              }
 399   1      
 400   1              LD_WriteReg(0xB2, 0xff);        
 401   1              LD_WriteReg(0x37, 0x06);
 402   1              delay( 5 );
 403   1              LD_WriteReg(0x1C, 0x0b);
 404   1              LD_WriteReg(0x29, 0x10);
 405   1              
 406   1              LD_WriteReg(0xBD, 0x00);
 407   1              EX0=1;
 408   1              return 1;
 409   1      }
 410          
 411          void LD_AsrAddFixed_ByString(char * pRecogString, uint8 k)
 412          {
 413   1              uint8 nAsrAddLength;
 414   1      
 415   1              SendByteHex(k);
 416   1              SendString("    ");
 417   1              SendString(pRecogString);
 418   1              SendLineEnd();
 419   1      
 420   1      
 421   1              if (*pRecogString==0)
 422   1                      return;
 423   1      
 424   1              LD_WriteReg(0xc1, k );
 425   1              LD_WriteReg(0xc3, 0 );
 426   1              LD_WriteReg(0x08, 0x04);
 427   1              delay(1);
C51 COMPILER V7.10   LDCHIP                                                                09/17/2011 14:04:12 PAGE 8   

 428   1              LD_WriteReg(0x08, 0x00);
 429   1              delay(1);
 430   1      
 431   1      
 432   1      
 433   1      
 434   1              for (nAsrAddLength=0; nAsrAddLength<50; nAsrAddLength++)
 435   1              {
 436   2                      if (pRecogString[nAsrAddLength] == 0)
 437   2                              break;
 438   2                      LD_WriteReg(0x5, pRecogString[nAsrAddLength]);
 439   2              }
 440   1              
 441   1              LD_WriteReg(0xb9, nAsrAddLength);
 442   1              LD_WriteReg(0xb2, 0xff);
 443   1              LD_WriteReg(0x37, 0x04);
 444   1      }
 445          
 446          void LD_AsrAddFixed_ByIndex(uint8 nIndex)
 447          {
 448   1              switch(nIndex)
 449   1              {
 450   2              case  0: LD_AsrAddFixed_ByString(STR_00,nIndex); break;
 451   2              case  1: LD_AsrAddFixed_ByString(STR_01,nIndex); break;
 452   2              case  2: LD_AsrAddFixed_ByString(STR_02,nIndex); break;
 453   2              case  3: LD_AsrAddFixed_ByString(STR_03,nIndex); break;
 454   2              case  4: LD_AsrAddFixed_ByString(STR_04,nIndex); break;
 455   2              case  5: LD_AsrAddFixed_ByString(STR_05,nIndex); break;
 456   2              case  6: LD_AsrAddFixed_ByString(STR_06,nIndex); break;
 457   2              case  7: LD_AsrAddFixed_ByString(STR_07,nIndex); break;
 458   2              case  8: LD_AsrAddFixed_ByString(STR_08,nIndex); break;
 459   2              case  9: LD_AsrAddFixed_ByString(STR_09,nIndex); break;
 460   2              case 10: LD_AsrAddFixed_ByString(STR_10,nIndex); break;
 461   2              case 11: LD_AsrAddFixed_ByString(STR_11,nIndex); break;
 462   2              case 12: LD_AsrAddFixed_ByString(STR_12,nIndex); break;
 463   2              case 13: LD_AsrAddFixed_ByString(STR_13,nIndex); break;
 464   2              case 14: LD_AsrAddFixed_ByString(STR_14,nIndex); break;
 465   2              case 15: LD_AsrAddFixed_ByString(STR_15,nIndex); break;
 466   2              case 16: LD_AsrAddFixed_ByString(STR_16,nIndex); break;
 467   2              case 17: LD_AsrAddFixed_ByString(STR_17,nIndex); break;
 468   2              case 18: LD_AsrAddFixed_ByString(STR_18,nIndex); break;
 469   2              case 19: LD_AsrAddFixed_ByString(STR_19,nIndex); break;
 470   2              case 20: LD_AsrAddFixed_ByString(STR_20,nIndex); break;
 471   2              case 21: LD_AsrAddFixed_ByString(STR_21,nIndex); break;
 472   2              case 22: LD_AsrAddFixed_ByString(STR_22,nIndex); break;
 473   2              case 23: LD_AsrAddFixed_ByString(STR_23,nIndex); break;
 474   2              case 24: LD_AsrAddFixed_ByString(STR_24,nIndex); break;
 475   2              case 25: LD_AsrAddFixed_ByString(STR_25,nIndex); break;
 476   2              case 26: LD_AsrAddFixed_ByString(STR_26,nIndex); break;
 477   2              case 27: LD_AsrAddFixed_ByString(STR_27,nIndex); break;
 478   2              case 28: LD_AsrAddFixed_ByString(STR_28,nIndex); break;
 479   2              case 29: LD_AsrAddFixed_ByString(STR_29,nIndex); break;
 480   2              case 30: LD_AsrAddFixed_ByString(STR_30,nIndex); break;
 481   2              case 31: LD_AsrAddFixed_ByString(STR_31,nIndex); break;
 482   2              case 32: LD_AsrAddFixed_ByString(STR_32,nIndex); break;
 483   2              case 33: LD_AsrAddFixed_ByString(STR_33,nIndex); break;
 484   2              case 34: LD_AsrAddFixed_ByString(STR_34,nIndex); break;
 485   2              case 35: LD_AsrAddFixed_ByString(STR_35,nIndex); break;
 486   2              case 36: LD_AsrAddFixed_ByString(STR_36,nIndex); break;
 487   2              case 37: LD_AsrAddFixed_ByString(STR_37,nIndex); break;
 488   2              case 38: LD_AsrAddFixed_ByString(STR_38,nIndex); break;
 489   2              case 39: LD_AsrAddFixed_ByString(STR_39,nIndex); break;
C51 COMPILER V7.10   LDCHIP                                                                09/17/2011 14:04:12 PAGE 9   

 490   2              case 40: LD_AsrAddFixed_ByString(STR_40,nIndex); break;
 491   2              case 41: LD_AsrAddFixed_ByString(STR_41,nIndex); break;
 492   2              case 42: LD_AsrAddFixed_ByString(STR_42,nIndex); break;
 493   2              case 43: LD_AsrAddFixed_ByString(STR_43,nIndex); break;
 494   2              case 44: LD_AsrAddFixed_ByString(STR_44,nIndex); break;
 495   2              case 45: LD_AsrAddFixed_ByString(STR_45,nIndex); break;
 496   2              case 46: LD_AsrAddFixed_ByString(STR_46,nIndex); break;
 497   2              case 47: LD_AsrAddFixed_ByString(STR_47,nIndex); break;
 498   2              case 48: LD_AsrAddFixed_ByString(STR_48,nIndex); break;
 499   2              case 49: LD_AsrAddFixed_ByString(STR_49,nIndex); break;
 500   2      
 501   2              }
 502   1      
 503   1      }
 504          
 505          
 506          // Return 1: success.
 507          //      添加识别关键词语，开发者可以学习"语音识别芯片LD3320高阶秘籍.pdf"中关于垃圾词语吸收错误的用法
 508          uint8 LD_AsrAddFixed()
 509          {
 510   1              uint8 k, flag;
 511   1                      
 512   1              SendString("\nLD_AsrAddFixed().");
 513   1              SendLineEnd();
 514   1      
 515   1      
 516   1              flag = 1;
 517   1              for (k=0; k<ITEM_COUNT; k++)
 518   1              {
 519   2                              
 520   2                      if(LD_Check_ASRBusyFlag_b2() == 0)
 521   2                      {
 522   3                              flag = 0;
 523   3                              break;
 524   3                      }
 525   2                      
 526   2                      LD_AsrAddFixed_ByIndex(k);
 527   2              }
 528   1          return flag;
 529   1      }
 530          
 531          
 532          
 533          uint8 LD_GetResult()
 534          {
 535   1              uint8 res;
 536   1      
 537   1              res = LD_ReadReg(0xc5);
 538   1              SendString("ASR Result = ");
 539   1              SendByteHex(res);
 540   1              SendLineEnd();
 541   1      
 542   1              return res;
 543   1      }
 544          
 545          
 546          void PlaySound(uint8 nCode)
 547          {
 548   1              if (nCode>=ITEM_COUNT)
 549   1                      return;
 550   1      
 551   1      
C51 COMPILER V7.10   LDCHIP                                                                09/17/2011 14:04:12 PAGE 10  

 552   1              nMp3StartPos = pAsrItem[nCode].nSoundStart;
 553   1              nMp3Size = pAsrItem[nCode].nSoundSize;
 554   1      
 555   1              SendString("PlaySound - ");
 556   1              SendByteHex(nCode);
 557   1              SendLongHex(nMp3StartPos);
 558   1              SendLongHex(nMp3Size);
 559   1              SendLineEnd();
 560   1      
 561   1              LD_Init_MP3();
 562   1              LD_AdjustMIX2SPVolume(SPEAKER_VOL);
 563   1              LD_play();
 564   1      }
 565          
 566          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2036    ----
   CONSTANT SIZE    =    143    ----
   XDATA SIZE       =     32    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17      23
   IDATA SIZE       =      6    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
